<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typescript中的函数</title>
      <link href="/2022/12/28/javascript/typescript/typescript-zhong-de-han-shu/"/>
      <url>/2022/12/28/javascript/typescript/typescript-zhong-de-han-shu/</url>
      
        <content type="html"><![CDATA[<p>ES5中我们通常定义函数的方法</p><figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">&nbsp;<span class="keyword">return</span> <span class="string">'函数声明'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">&nbsp;<span class="keyword">return</span> <span class="string">'匿名函数'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>TS中我们定义函数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、函数声明式定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>):<span class="title">string</span></span>{</span><br><span class="line">&nbsp;<span class="keyword">return</span> <span class="string">'123'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>):<span class="title">number</span></span>{</span><br><span class="line">&nbsp;<span class="keyword">return</span> <span class="string">'123'</span>  <span class="comment">//× 返回值类型与定义的返回值类型不一致</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//2、匿名函数定义</span></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>):<span class="title">void</span></span>{</span><br><span class="line">&nbsp;<span class="built_in">console</span>.log(<span class="string">'123'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、定义方法参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">name:string, age:number</span>):<span class="title">string</span></span>{</span><br><span class="line">&nbsp;<span class="keyword">return</span> <span class="string">`我的名字叫<span class="subst">${name}</span>,我今年<span class="subst">${age}</span>`</span>;</span><br><span class="line">}</span><br><span class="line">test1(<span class="string">'zhangsan'</span>, <span class="number">20</span>) <span class="comment">//√</span></span><br><span class="line">test1(<span class="string">'zhangsan'</span>, <span class="string">'20'</span>) <span class="comment">//×</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、配置可选参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">name:string, age?:number</span>):<span class="title">string</span></span>{</span><br><span class="line">&nbsp;<span class="keyword">if</span>(age){</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">return</span> <span class="string">`我的名字叫<span class="subst">${name}</span>,我今年<span class="subst">${age}</span>`</span>;</span><br><span class="line">&nbsp;}<span class="keyword">else</span>{</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">return</span> <span class="string">`我的名字叫<span class="subst">${name}</span>`</span>;</span><br><span class="line">&nbsp;}</span><br><span class="line">}</span><br><span class="line">test1(<span class="string">'zhangsan'</span>, <span class="number">30</span>) <span class="comment">// √</span></span><br><span class="line">test1(<span class="string">'zhangsan'</span>) <span class="comment">// √</span></span><br></pre></td></tr></tbody></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//剩余参数(放在所有参数最后)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(f:number, <span class="rest_arg">...args</span>:number[])</span>:number</span>{</span><br><span class="line">    console.log(f);    </span><br><span class="line">    <span class="keyword">var</span> total:number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;args.length; i++){</span><br><span class="line">        total+= args[i]</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">console.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> script </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript中的数据类型</title>
      <link href="/2022/12/22/javascript/typescript/typescript-zhong-de-shu-ju-lei-xing/"/>
      <url>/2022/12/22/javascript/typescript/typescript-zhong-de-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<ul><li><p>字符串类型</p><figure class="highlight rust"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">str</span>:string = <span class="symbol">'zhangsan</span>'</span><br><span class="line"><span class="built_in">str</span> = <span class="number">50</span>  <span class="comment">//重新复制数值类型报错</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>数字类型</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">num</span>:<span class="built_in">number</span> = <span class="number">30</span></span><br><span class="line"><span class="built_in">num</span> = <span class="string">'wangwu'</span><span class="comment"> //重新复制数值类型报错</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>布尔类型</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let <span class="string">tf:</span><span class="keyword">boolean</span> = <span class="literal">true</span></span><br><span class="line">tf = <span class="string">'wangwu'</span> <span class="comment">//重新复制数值类型报错</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>数组类型</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">15</span>,<span class="number">10</span>,<span class="number">13</span>] <span class="comment">//√</span></span><br><span class="line">arr1:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">15</span>,<span class="string">'10'</span>,<span class="number">13</span>] <span class="comment">//×，含有字符串报错</span></span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="keyword">let</span> arr1:<span class="built_in">any</span> = [<span class="number">15</span>,<span class="string">'10'</span>,<span class="number">13</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1) <span class="comment">//√不会报错，属于any类型</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>元祖类型（tulp属于数组的一种）  </p></li></ul><p>类似于es5中不规定类型一样</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let oBox:any = document.getElementById(<span class="string">'box'</span>)</span><br><span class="line">oBox<span class="selector-class">.style</span><span class="selector-class">.color</span> = <span class="string">'red'</span> <span class="comment">//报错oBox没有Object类型，这个是否定义any比较合适</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>枚举类型（enum）</p><figure class="highlight crystal"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">message</span> {</span></span><br><span class="line">&nbsp;success = <span class="number">200</span>,</span><br><span class="line">&nbsp;error = <span class="number">400</span>,</span><br><span class="line">&nbsp;wait</span><br><span class="line">}</span><br><span class="line">console.log(message.success) /<span class="regexp">/√,200</span></span><br><span class="line"><span class="regexp">console.log(message.wait) /</span><span class="regexp">/√,401以上一个元素如果是数值会接着上一个数值开始</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>其他类型<br>null、undefined</p><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let num:number</span><br><span class="line">console.log(num) //报错,输出undefined</span><br><span class="line">-------------------------------------------</span><br><span class="line">let num:undefined</span><br><span class="line">console.log(num) //√,输出undefined</span><br><span class="line">-------------------------------------------</span><br><span class="line">let num:number|undefined;</span><br><span class="line"><span class="comment">//num = 123</span></span><br><span class="line"><span class="comment">//console.log(num) //√,输出123</span></span><br><span class="line"><span class="comment">//如果不定义</span></span><br><span class="line">console.log(num) //√,输出undefined也是正确的</span><br></pre></td></tr></tbody></table></figure></li><li><p>void类型<br>一个方法没有任何返回值的时候给定的类型</p><figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个方法没有任何返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span>:void</span>{</span><br><span class="line">&nbsp;console.log(<span class="string">'void这个方法没有任何的返回值!'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个方法返回字符串类型，其他一次类推</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span>:string</span>{</span><br><span class="line">&nbsp;<span class="keyword">return</span> <span class="string">'我返回字符串类型的值'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>never类型<br>是其他类型包括（null, undefined）类型的子类型，声明never类型的变量只能never类型赋值</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">num</span>:undefined</span><br><span class="line"><span class="built_in">num</span> = <span class="number">123</span> <span class="comment">//×</span></span><br><span class="line"><span class="built_in">num</span> = undefined <span class="comment">//√</span></span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> script </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>promise的个人理解</title>
      <link href="/2022/11/22/javascript/promise/promise-de-li-jie/"/>
      <url>/2022/11/22/javascript/promise/promise-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>简单从语法上讲promise是一个对象，可以获异步的一个操作结果，从语义上讲，它代表的意思是一个承诺，承诺一段时间内会给出一个结果。每个promise都有三种状态：pending(进行中)、fulilled(完成)、rejected(失败)，状态一旦改变，就不会在随着后续操作再次改变。通过new一个promise实例后，它会立即执行</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'resolved.'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi!'</span>);</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，Promise 新建后立即执行，所以首先输出的是Promise。然后，then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以resolved最后输出。  </p><h3 id="解决什么问题"><a href="#解决什么问题" class="headerlink" title="解决什么问题"></a>解决什么问题</h3><p>在异步操作中，往往通过回调函数来获得操作结果，如果出现多层相互嵌套就会形成回调地狱，并且代码可读性非常差。通过promise我们可以像通过操作同步代码一样去操作异步代码</p><h3 id="它有什么缺点"><a href="#它有什么缺点" class="headerlink" title="它有什么缺点"></a>它有什么缺点</h3><p>1、一旦创建立即执行，无法在中途进行取消；<br>2、操作结果一旦确定就会定型后续操作无法改变状态;<br>3、无法确定pending状态发展到那个阶段；</p><h3 id="如何定义"><a href="#如何定义" class="headerlink" title="如何定义"></a>如何定义</h3><p>可以通过new一个Promise的构造函数,生成一个promise的实例对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>{</span><br><span class="line">&nbsp;<span class="keyword">if</span>(<span class="comment">/*异步操作成功*/</span>){</span><br><span class="line">&nbsp;&nbsp;resolve(<span class="string">'success'</span>)</span><br><span class="line">&nbsp;}<span class="keyword">else</span>{</span><br><span class="line">&nbsp;&nbsp;reject(<span class="string">'err'</span>)</span><br><span class="line">&nbsp;}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数：</p><figure class="highlight scilab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(value)</span>{</span></span><br><span class="line">&nbsp;<span class="comment">//接受resolve(value)状态为resolved时候调用</span></span><br><span class="line">}, <span class="function"><span class="keyword">function</span><span class="params">(err)</span>{</span></span><br><span class="line">&nbsp;<span class="comment">// 接受reject('err')状态为rejected时候调用</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>一个简单的例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tme</span>(<span class="params">ms</span>)</span>{</span><br><span class="line">&nbsp;<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>{</span><br><span class="line">&nbsp;&nbsp;setTimeout(resolve, ms, <span class="string">'success'</span>)</span><br><span class="line">&nbsp;})</span><br><span class="line">}</span><br><span class="line">tme(<span class="number">2000</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) =&gt; </span>{</span><br><span class="line">&nbsp;<span class="built_in">console</span>.log(res)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，timeout方法返回一个Promise实例，表示一段时间以后才会发生的结果。过了指定的时间（ms参数）以后，Promise实例的状态变为resolved，就会触发then方法绑定的回调函数。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>彻底搞明白Object.defineProperty()的使用</title>
      <link href="/2022/07/23/javascript/ri-chang-zong-jie/defineproperty/"/>
      <url>/2022/07/23/javascript/ri-chang-zong-jie/defineproperty/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</p><blockquote><p>备注：应当直接在 Object 构造器对象上调用此方法，而不是在任意一个 Object 类型的实例上调用。  </p></blockquote><p>api的使用</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">&nbsp;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">'a'</span>,{</span><br><span class="line">    configurable:<span class="literal">true</span>,<span class="comment">//表示对象的属性是否可以被删除，以及除value和writable特性外的其他特性是否可以被修改</span></span><br><span class="line">    enumerable:<span class="literal">true</span>,<span class="comment">//可以被枚举</span></span><br><span class="line">    writable:<span class="literal">true</span>,<span class="comment">//可以修改这个属性的值</span></span><br><span class="line">    value:<span class="number">1</span><span class="comment">//定义一个初始的值为1</span></span><br><span class="line">})</span><br><span class="line"><span class="built_in">console</span>.log(person)<span class="comment">//Object {a: 1}</span></span><br><span class="line">person.a=<span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(person)<span class="comment">//Object {a: 2}</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> person){</span><br><span class="line">    <span class="built_in">console</span>.log(k)<span class="comment">//a,可以被枚举</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>1、configurable</p><blockquote><p>当且仅当该属性的 configurable 键值为 true 时，该属性的描述符（descriptor）才能够被改变，同时该属性也能从对应的对象上被删除,默认为 false。</p></blockquote><ul><li>这个属性起到两个作用：<br>  +目标属性是否可以使用delete删除<br>  +目标属性是否可以再次设置特性（descriptor）<figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//**********************测试目标属性是否能被删除**********************-------</span></span><br><span class="line"><span class="string">var</span> <span class="string">obj</span> <span class="string">=</span> <span class="string">{}</span></span><br><span class="line"><span class="string">//第一种情况：configurable设置为false，不能被删除。</span></span><br><span class="line"><span class="string">Object.defineProperty(obj,"a",{</span></span><br><span class="line"><span class="attr">    value:</span><span class="string">"1"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    writable:</span><span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">    enumerable:</span><span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">    configurable:</span><span class="literal">false</span></span><br><span class="line"><span class="string">});</span></span><br><span class="line"><span class="string">//删除属性</span></span><br><span class="line"><span class="string">delete</span> <span class="string">obj.a;</span></span><br><span class="line"><span class="string">console.log(</span> <span class="string">obj.a</span> <span class="string">);</span> <span class="string">//依然是1，因为configurable:false</span></span><br><span class="line"></span><br><span class="line"><span class="string">//第二种情况：configurable设置为true，可以被删除。</span></span><br><span class="line"><span class="string">Object.defineProperty(obj,"a",{</span></span><br><span class="line"><span class="attr">    value:</span><span class="string">"1"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    writable:</span><span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">    enumerable:</span><span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">    configurable:</span><span class="literal">true</span></span><br><span class="line"><span class="string">});</span></span><br><span class="line"><span class="string">//删除属性</span></span><br><span class="line"><span class="string">delete</span> <span class="string">obj.a;</span></span><br><span class="line"><span class="string">console.log(</span> <span class="string">obj.a</span> <span class="string">);</span> <span class="string">//返回undefined说明删除成功,因为configurable:true</span></span><br><span class="line"></span><br><span class="line"><span class="string">//**********************测试是否可以再次修改特性**********************-------</span></span><br><span class="line"><span class="string">var</span> <span class="string">obj</span> <span class="string">=</span> <span class="string">{}</span></span><br><span class="line"><span class="string">//第一种情况：configurable设置为false，不能再次修改特性（descriptor）。</span></span><br><span class="line"><span class="string">Object.defineProperty(obj,"a",{</span></span><br><span class="line"><span class="attr">    value:</span><span class="string">"1"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    writable:</span><span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">    enumerable:</span><span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">    configurable:</span><span class="literal">false</span></span><br><span class="line"><span class="string">});</span></span><br><span class="line"></span><br><span class="line"><span class="string">//重新修改特性</span></span><br><span class="line"><span class="string">Object.defineProperty(obj,"a",{</span></span><br><span class="line"><span class="attr">    value:</span><span class="string">"1"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    writable:</span><span class="literal">true</span><span class="string">,</span> <span class="string">//修改后</span></span><br><span class="line"><span class="attr">    enumerable:</span><span class="literal">true</span><span class="string">,</span> <span class="string">//修改后</span></span><br><span class="line"><span class="attr">    configurable:</span><span class="literal">true</span></span><br><span class="line"><span class="string">});</span></span><br><span class="line"><span class="string">console.log(</span> <span class="string">obj.a</span> <span class="string">);</span> <span class="string">//报错：Uncaught</span> <span class="attr">TypeError:</span> <span class="string">Cannot</span> <span class="string">redefine</span> <span class="attr">property:</span> <span class="string">a</span></span><br><span class="line"></span><br><span class="line"><span class="string">//第二种情况：configurable设置为true，可以再次修改特性。</span></span><br><span class="line"><span class="string">Object.defineProperty(obj,"a",{</span></span><br><span class="line"><span class="attr">    value:</span><span class="string">"1"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    writable:</span><span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">    enumerable:</span><span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">    configurable:</span><span class="literal">true</span></span><br><span class="line"><span class="string">});</span></span><br><span class="line"></span><br><span class="line"><span class="string">//重新修改特性</span></span><br><span class="line"><span class="string">Object.defineProperty(obj,"a",{</span></span><br><span class="line"><span class="attr">    value:</span><span class="string">"1"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    writable:</span><span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    enumerable:</span><span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    configurable:</span><span class="literal">true</span></span><br><span class="line"><span class="string">});</span></span><br><span class="line"><span class="string">console.log(</span> <span class="string">obj.a</span> <span class="string">);</span> <span class="string">//1</span></span><br></pre></td></tr></tbody></table></figure></li></ul><p>2、enumerable</p><blockquote><p>当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中,默认为 false ;</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {}</span><br><span class="line"><span class="comment">//第一种情况：enumerable设置为false，不能被枚举。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,{</span><br><span class="line">    value:<span class="string">"1"</span>,</span><br><span class="line">    writable:<span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">false</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举对象的属性</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> attr <span class="keyword">in</span> obj ){</span><br><span class="line">    <span class="built_in">console</span>.log( attr );  </span><br><span class="line">}</span><br><span class="line"><span class="comment">//第二种情况：enumerable设置为true，可以被枚举。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,{</span><br><span class="line">    value:<span class="string">"1"</span>,</span><br><span class="line">    writable:<span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">true</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举对象的属性</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> attr <span class="keyword">in</span> obj ){</span><br><span class="line">    <span class="built_in">console</span>.log( attr );  <span class="comment">//a</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3、writable</p><blockquote><p>当且仅当该属性的 writable 键值为 true 时，属性的值，也就是上面的 value，才能被赋值运算符改变默认为false;</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性的值是否可以被重写。设置为true可以被重写；设置为false，不能被重写。默认为false。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = {}</span><br><span class="line"><span class="comment">//第一种情况：writable设置为false，不能重写。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,{</span><br><span class="line">    value:<span class="string">"1"</span>,</span><br><span class="line">    writable:<span class="literal">false</span></span><br><span class="line">});</span><br><span class="line"><span class="comment">//更改a的值</span></span><br><span class="line">obj.a = <span class="string">"change value"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( obj.a );  <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种情况：writable设置为true，可以重写</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,{</span><br><span class="line">    value:<span class="string">"1"</span>,</span><br><span class="line">    writable:<span class="literal">true</span></span><br><span class="line">});</span><br><span class="line"><span class="comment">//更改a的值</span></span><br><span class="line">obj.a = <span class="string">"change value"</span>;</span><br></pre></td></tr></tbody></table></figure><p>4、我们看看访问器属性</p><blockquote><p>当使用存取器描述属性的特性的时候，允许设置以下特性属性,注意：当使用了getter或setter方法，不允许使用writable和value这两个属性</p></blockquote><figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {};</span><br><span class="line">Object.defineProperty(obj,<span class="string">"a"</span>,{</span><br><span class="line">&nbsp;configurable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">&nbsp;enumerable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">get</span>:<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>{} | <span class="literal">undefined</span>,</span><br><span class="line">    <span class="keyword">set</span>:<span class="function"><span class="keyword">function</span> <span class="params">(value)</span></span>{} | <span class="literal">undefined</span>    </span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>看一个示例</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> person = {</span><br><span class="line">    a:<span class="number">1</span></span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(person,<span class="string">'a'</span>,{</span><br><span class="line">    <span class="keyword">get</span>(){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> <span class="comment">//当访问这个属性的时候返回3</span></span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">set</span>(val){</span><br><span class="line">        <span class="built_in">console</span>.log(val)<span class="comment">//当设置这个属性的时候执行,val是设置的值</span></span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">person.a<span class="comment">// 3,我们明明写的是a:1,怎么返回的3呢?这就是get()的威力了</span></span><br><span class="line">person.a = <span class="number">5</span><span class="comment">// 5,相应的设置的时候执行了set()函数</span></span><br></pre></td></tr></tbody></table></figure><p>在来模拟一个访问和设置的默认行为</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">    a:<span class="number">1</span></span><br><span class="line">}</span><br><span class="line"># 注:里面的<span class="keyword">this</span>指向ogj(person)</span><br><span class="line">Object.defineProperty(person,<span class="string">'a'</span>,{</span><br><span class="line">    <span class="keyword">get</span>(){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a </span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">set</span>(<span class="keyword">val</span>){</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="keyword">val</span> </span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="comment">//我们想当然的这么写.</span></span><br><span class="line"><span class="comment">//person.a//Uncaught RangeError: Maximum call stack size exceeded</span></span><br><span class="line"><span class="comment">//什么,溢出了?这是为什么?</span></span><br><span class="line"><span class="comment">//哦~原来是这么写的话会造成循环引用,狂call不止</span></span><br><span class="line"><span class="comment">//我们看下流程:</span></span><br><span class="line"><span class="comment">//person.a → get.call(person) → this.a → person.a  → get.call(person) → this.a......</span></span><br></pre></td></tr></tbody></table></figure><p>需要修改如下：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">    a:<span class="number">1</span></span><br><span class="line">}</span><br><span class="line">Object.defineProperty(person,<span class="string">'a'</span>,{</span><br><span class="line">    <span class="keyword">get</span>(){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._a || <span class="number">1</span> <span class="comment">//定义一个新的属性和一个默认值</span></span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">set</span>(<span class="keyword">val</span>){</span><br><span class="line">        <span class="keyword">this</span>._a = <span class="keyword">val</span> </span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">person.a<span class="comment">// 1</span></span><br><span class="line">person.a=<span class="number">2</span><span class="comment">// 2</span></span><br><span class="line">person.a<span class="comment">// 2</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>升级hexo和nodejs导致hexo命名报错问题</title>
      <link href="/2022/07/23/hexo/hexo-zhong-node-ban-ben-wen-ti/"/>
      <url>/2022/07/23/hexo/hexo-zhong-node-ban-ben-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="迁移Hexo到Node-js-14-解决部署时报错"><a href="#迁移Hexo到Node-js-14-解决部署时报错" class="headerlink" title="迁移Hexo到Node.js 14 解决部署时报错"></a>迁移Hexo到Node.js 14 解决部署时报错</h3><ul><li><p>概述</p><blockquote><p>升级nodejs之后执行原来的hexo d发布到git上结构报错</p></blockquote></li><li><p>环境</p><blockquote><p>Node.js 14.17.4, Hexo-cli 4.3.0, Hexo 5.4.0</p></blockquote></li><li><p>报错内容</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The <span class="string">"mode"</span> argument must be integer. Received an<span class="built_in"> instance </span>of Object</span><br></pre></td></tr></tbody></table></figure></li></ul><figure class="highlight d"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARN  Deprecated config detected: <span class="string">"external_link"</span> <span class="keyword">with</span> a Boolean value <span class="keyword">is</span> <span class="keyword">deprecated</span>. See https:<span class="comment">//hexo.io/docs/configuration for more details.</span></span><br></pre></td></tr></tbody></table></figure><ul><li>解决<blockquote><p>降低node版本到12.17.0（缺点不够优雅，有的项目需要另外的版本）<br>使用nvm管理node不同版本</p></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决GitHub报错You‘re using an RSA key with SHA-1, which is no longer allowed.Please use a newer client</title>
      <link href="/2022/07/23/git/chang-jian-wen-ti/pei-zhi-xiang-guan/sshkey/"/>
      <url>/2022/07/23/git/chang-jian-wen-ti/pei-zhi-xiang-guan/sshkey/</url>
      
        <content type="html"><![CDATA[<p>解决GitHub报错You‘re using an RSA key with SHA-1, which is no longer allowed. Please use a newer client  </p><p>在使用git pull的时候出现下面的错误提示<br>You’re using an RSA key with SHA-1, which is no longer allowed. Please use a newer client</p><p>原因：GitHub 在 2022 年 3 月 15 日之后将不再支持 RSA 算法生成的密钥，原因是 RSA 不够安全，而笔者之前一直是使用如下命令生成密钥对的所以提示使用sha</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>生成新的Ed25519密钥对：</p><figure class="highlight excel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> <span class="symbol">ed25519</span> -C <span class="string">"your-email"</span></span><br></pre></td></tr></tbody></table></figure><p>命令会生成两个新的密钥对:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">id_ed25519</span></span><br><span class="line"><span class="selector-tag">id_ed25519</span><span class="selector-class">.pub</span></span><br></pre></td></tr></tbody></table></figure><p>然后去github =&gt; setting =&gt; SSH and GPG keys里面，将原来的不支持的对应机器的key删除掉，然后添加新生成的key（id_ed25519.pub）就行了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh_key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eventloop个人理解</title>
      <link href="/2022/03/24/javascript/eventloop/eventloop/"/>
      <url>/2022/03/24/javascript/eventloop/eventloop/</url>
      
        <content type="html"><![CDATA[<h2 id="js事件循环机制在浏览器端（Event-Loop）以及async-await的理解"><a href="#js事件循环机制在浏览器端（Event-Loop）以及async-await的理解" class="headerlink" title="js事件循环机制在浏览器端（Event Loop）以及async/await的理解"></a>js事件循环机制在浏览器端（Event Loop）以及async/await的理解</h2><p>先看如下的一段代码</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">async</span> fun1(){</span><br><span class="line">&nbsp;<span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&nbsp;<span class="keyword">await</span> fun2()</span><br><span class="line">&nbsp;<span class="built_in">console</span>.log(<span class="number">3</span>)  <span class="comment">// 遇到await的时候会去执行外面的同步代码，当同步代码执行完毕在继续执行await后面的代码然后在执行本次循环的微任务代码</span></span><br><span class="line">}</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">&nbsp;<span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">},<span class="number">0</span>)</span><br><span class="line">fun2(){</span><br><span class="line">&nbsp;<span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">}</span><br><span class="line">fun1()</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>{</span><br><span class="line">&nbsp;<span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">&nbsp;resolve()</span><br><span class="line">}).then(<span class="function">(<span class="params">res</span>)=&gt;</span>{</span><br><span class="line">&nbsp;<span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">})</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line"><span class="comment">// 1  2  4  3  8  6  7  5</span></span><br></pre></td></tr></tbody></table></figure><p>我们可以将js的任务分为同步任务和异步任务, 按照这种分类js的执行机制如下：</p><ul><li>任务执行队列分为同步任务队列和异步任务队列</li><li>代码执行时，遇到同步代码，会被直接推入同步任务队列并依次执行</li><li>遇到异步代码(如setTimeout、setInterval), 会被直接推入异步任务队列</li><li>当同步任务队列执行完毕，这个时候异步任务队列的任务会被依次推入同步任务队列并依次执行  </li></ul><blockquote><p>所以上面的代码执行的时候, setTimeout()不会被立即执行，会被推到异步任务队列里面, 之后再执行console.log(2), 同步任务队列任务执行完毕之后，会去异步任务队列的任务会被依次推到 同步任务队列并执行</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vuex浅析</title>
      <link href="/2022/01/21/vue/vuex/vuex-qian-xi/"/>
      <url>/2022/01/21/vue/vuex/vuex-qian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><blockquote><p>定义：可以理解为它是集中式存储所有组件状态的一个小仓库,并且保持我们存储状态以一种可以预测的方式发生变化。  </p></blockquote><h4 id="一、想象一个场景"><a href="#一、想象一个场景" class="headerlink" title="一、想象一个场景"></a>一、想象一个场景</h4><h5 id="1、如果你的项目里面有很多的页面和组件，并且存在多级嵌套关系，此时这些页面需要一个共享数据，此时就会产生两个问题"><a href="#1、如果你的项目里面有很多的页面和组件，并且存在多级嵌套关系，此时这些页面需要一个共享数据，此时就会产生两个问题" class="headerlink" title="1、如果你的项目里面有很多的页面和组件，并且存在多级嵌套关系，此时这些页面需要一个共享数据，此时就会产生两个问题:"></a>1、如果你的项目里面有很多的页面和组件，并且存在多级嵌套关系，此时这些页面需要一个共享数据，此时就会产生两个问题:</h5><ul><li>多个嵌套和兄弟组件依赖同一个状态</li><li>在某个视图组件需要变更同一个状态  </li></ul><h5 id="2、如果需要解决以上问题你可能会想到一下方案："><a href="#2、如果需要解决以上问题你可能会想到一下方案：" class="headerlink" title="2、如果需要解决以上问题你可能会想到一下方案："></a>2、如果需要解决以上问题你可能会想到一下方案：</h5><ul><li>对于第一个问题，多组件嵌套，我们可以通过父子组件一层一层传递参数解决，虽然有些麻烦，但是能够解决问题，但是对于兄弟组件或者更负责的组件之间就很难办了，虽然可以通过各种办法去解决，或多或少会存在一定的问题，要么代码变得臃肿要么逻辑变的难以理解。</li><li>对于兄弟或者更负责的，可以通过父子组件直接引用，或者通过事件来变更、在这同步状态的多份拷贝  </li></ul><h5 id="3、能不能把公共的抽离出来"><a href="#3、能不能把公共的抽离出来" class="headerlink" title="3、能不能把公共的抽离出来"></a>3、能不能把公共的抽离出来</h5><ul><li>针对这样的需求，可以把各个组件需要依赖的同一个状态抽离出来，在全局中使用单例模式进行管理</li><li>这种模式下，当一个组件需要更新状态的时候，任何组件都可以实时访问到这个组件的变化，也就是所有组件都能够更新最新的变化  </li></ul><h5 id="4、这时候，Vuex诞生了！"><a href="#4、这时候，Vuex诞生了！" class="headerlink" title="4、这时候，Vuex诞生了！"></a>4、这时候，Vuex诞生了！</h5><ul><li>这就是 Vuex 背后的基本思想，借鉴了 Flux、Redux。与其他模式不同的是，Vuex 是专门为 Vue 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。</li></ul><p>这是官网对vuex的一张图:<br><img src="/2022/01/21/vue/vuex/vuex-qian-xi/5.jpg" alt="">  </p><p><strong>什么时候应该用vuex呢？</strong>  </p><ul><li>这个问题因人而异，如果你不需要开发大型的单页应用，此时你完全没有必要使用vuex，比如你的页面就两三个，使用vuex后增加的文件比你现在的页面还要多，那就没这个必要了。  </li><li>假如你的项目达到了中大型应用的规模，此时您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。  </li></ul><h4 id="安装vuex"><a href="#安装vuex" class="headerlink" title="安装vuex"></a>安装vuex</h4><p>进入项目，在命令行中输入命令  </p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="selector-tag">i</span> -S vuex</span><br></pre></td></tr></tbody></table></figure><p>然后配置 vuex，使其工作起来：在src路径下创建store文件夹，然后创建index.js文件，文件内容如下：  </p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue from <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex from <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">const store = <span class="keyword">new</span> Vuex.Store({</span><br><span class="line"><span class="symbol">state:</span> {</span><br><span class="line"><span class="symbol">name:</span> <span class="string">'zhangsan'</span>,</span><br><span class="line"><span class="symbol">age:</span> <span class="number">20</span>,</span><br><span class="line"><span class="symbol">friends:</span> [</span><br><span class="line">&nbsp;&nbsp;&nbsp;{<span class="string">name:</span><span class="string">'wanger'</span>, <span class="string">age:</span><span class="number">18</span>},</span><br><span class="line">&nbsp;&nbsp;&nbsp;{<span class="string">name:</span><span class="string">'lisi'</span>, <span class="string">age:</span><span class="number">36</span>},</span><br><span class="line">&nbsp;&nbsp;&nbsp;{<span class="string">name:</span><span class="string">'mazi'</span>, <span class="string">age:</span><span class="number">46</span>}</span><br><span class="line">&nbsp;&nbsp;]</span><br><span class="line">&nbsp;},</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>main.js文件做如下修改:    </p><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">&nbsp;el: <span class="string">'#app'</span>,</span><br><span class="line">&nbsp;Router,</span><br><span class="line">&nbsp;Store,</span><br><span class="line">&nbsp;components: {App},</span><br><span class="line">&nbsp;template: <span class="string">'&lt;App /&gt;'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="组件中使用vuex"><a href="#组件中使用vuex" class="headerlink" title="组件中使用vuex"></a>组件中使用vuex</h4><p>1、在App.vue中加入：   </p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;template&gt;</span></span><br><span class="line">&nbsp;<span class="variable">&lt;div&gt;</span></span><br><span class="line">&nbsp;&nbsp;<span class="variable">&lt;div&gt;</span>{{<span class="variable">$store</span>.<span class="keyword">state</span>.name}}&lt;/div&gt; // ---&gt;  zhangsan</span><br><span class="line">&nbsp;&nbsp;<span class="variable">&lt;div&gt;</span>{{getName()}}&lt;/div&gt; // ---&gt; zhangsan</span><br><span class="line">&nbsp;&lt;/div&gt;</span><br><span class="line">&nbsp;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="variable">&lt;script&gt;</span></span><br><span class="line">export <span class="keyword">default</span> {</span><br><span class="line">&nbsp;mounted(){</span><br><span class="line">&nbsp;&nbsp;// 在文件中直接可以通过this.<span class="variable">$store</span>.<span class="keyword">state</span>.xxx来访问仓库中的状态</span><br><span class="line">&nbsp;&nbsp;console.<span class="keyword">log</span>(this.<span class="variable">$store</span>.<span class="keyword">state</span>.name)</span><br><span class="line">&nbsp;}</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li><p>官网建议我们在使用this.$store.state访问仓库的时候最好使用计算属性</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>{</span><br><span class="line">&nbsp;computed: {</span><br><span class="line">&nbsp;&nbsp;getName(){</span><br><span class="line">&nbsp;&nbsp;&nbsp;return this.<span class="variable">$store</span>.state.name</span><br><span class="line">&nbsp;&nbsp;}</span><br><span class="line">&nbsp;},</span><br><span class="line">&nbsp;mounted(){</span><br><span class="line">&nbsp;&nbsp;this.getName()</span><br><span class="line">&nbsp;}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>是不是每次都写this.$store.state.name让你感到厌烦，你实在不想写这个东西怎么办?   </p></li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> { mapState } <span class="keyword">from</span> <span class="string">'vuex'</span>; <span class="comment">// 从vuex中导入mapState</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line">    mounted() {</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span></span><br><span class="line">    },</span><br><span class="line">    computed: {</span><br><span class="line"><span class="actionscript">        ...mapState([<span class="string">'name'</span>], {aliasAge: <span class="string">'age'</span>}), <span class="comment">// 经过解构后，自动就添加到了计算属性中，此时就可以直接像访问计算属性一样访问它,通过aliasAge还可以取别名</span></span></span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="了解修饰器：getter的作用"><a href="#了解修饰器：getter的作用" class="headerlink" title="了解修饰器：getter的作用"></a>了解修饰器：getter的作用</h4><blockquote><p>有个需求是这样的，假设你项目有5个页面，其中2个页面使用name，另外3个页面需要在name前面加上hello,怎么操作？</p></blockquote><ul><li>针对那3个页面去修改并在name前加上hello吗？，这样会造成代码冗余，很不好；</li><li>假如下次产品经理让你把 “hello” 改成 “fuck” 的时候，你又得把三个页面都改一遍，想死的心都有啦  </li></ul><blockquote><p>正对这种问题我们有没有解决方案呢？答案是有的，我们可以直接在store中对name进行一些操作或者加工，从源头解决问题！那么具体应该怎么写呢？getters就用上啦  </p></blockquote><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import Vue <span class="keyword">from</span> 'vue';</span><br><span class="line">import Vuex <span class="keyword">from</span> 'vuex';</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store({</span><br><span class="line">    <span class="keyword">state</span>: {</span><br><span class="line">    name: 'zhangsan',</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    friends: [</span><br><span class="line">    {name:'wanger', age:<span class="number">18</span>},</span><br><span class="line">    {name:'lisi', age:<span class="number">36</span>},</span><br><span class="line">    {name:'mazi', age:<span class="number">46</span>}</span><br><span class="line">    ]</span><br><span class="line">    },</span><br><span class="line">    // 在store对象中增加getters属性</span><br><span class="line">    getters: {</span><br><span class="line">        getMessage(<span class="keyword">state</span>) { // 获取修饰后的name，第一个参数<span class="keyword">state</span>为必要参数，必须写在形参上</span><br><span class="line">            return `hello${<span class="keyword">state</span>.name}`;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> store;</span><br></pre></td></tr></tbody></table></figure><p>在组件中使用：</p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export <span class="keyword">default</span> {</span><br><span class="line">&nbsp;mounted() {</span><br><span class="line">&nbsp;&nbsp;// 注意不是<span class="variable">$store</span>.<span class="keyword">state</span>了，而是<span class="variable">$store</span>.getters</span><br><span class="line">&nbsp;&nbsp;console.<span class="keyword">log</span>(this.<span class="variable">$store</span>.<span class="keyword">state</span>.name);</span><br><span class="line">&nbsp;&nbsp;console.<span class="keyword">log</span>(this.<span class="variable">$store</span>.getters.getMessage);</span><br><span class="line">&nbsp;}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>和mapState一样，是不是每次都通过this.$store.state.xxx一样麻烦，这个时候我们同样可以使用</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> {mapState, mapGetters} <span class="keyword">from</span> <span class="string">'vuex'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line">&nbsp;mounted(){</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.getAge)</span></span><br><span class="line">&nbsp;},</span><br><span class="line">&nbsp;computed: {</span><br><span class="line"><span class="actionscript">...mapState([<span class="string">'name'</span>]),</span></span><br><span class="line"><span class="actionscript">...mapGetters([<span class="string">'getAge'</span>])</span></span><br><span class="line"><span class="actionscript">...mapGetters({aliasName: <span class="string">'getPersionAge'</span>})</span></span><br><span class="line">&nbsp;}</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="了解如何修改值：Mutation"><a href="#了解如何修改值：Mutation" class="headerlink" title="了解如何修改值：Mutation"></a>了解如何修改值：Mutation</h4><p>🤗 OK！首先恭喜你看到了这里，至此，我们已经成功访问到了store里面的值，接下来我来介绍一下怎么修改state里面的值。</p><p>说到修改值，有的同学就会想到这样写：</p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 错误示范</span><br><span class="line">this.<span class="variable">$store</span>.<span class="keyword">state</span>.XXX = XXX;</span><br></pre></td></tr></tbody></table></figure><p>🤪 首先，这里我先明确的说明：这是错误的写法！这是错误的写法！这是错误的写法！</p><p>为什么上面是错误的写法？因为这个store仓库比较奇怪，你可以随便拿，但是你不能随便改，我举个例子：</p><p>🤔 假如你打开微信朋友圈，看到你的好友发了动态，但是动态里有个错别字，你要怎么办呢？你可以帮他改掉吗？当然不可以！我们只能通知他本人去修改，因为是别人的朋友圈，你是无权操作的，只有他自己才能操作，同理，在vuex中，我们不能直接修改仓库里的值，必须用vuex自带的方法去修改，这个时候，Mutation闪亮登场了！</p><p>😬 把问题解释清楚之后，我们准备完成一个效果：我们先输出state中的number的默认值0，然后我们在vue组件里通过提交Mutations改变number的默认值0，改成我们想修改的值，然后再输出出来，这样就可以简单练习怎么使用Mutations了。不说废话，上代码。<br><strong>修改store/index.js</strong></p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import Vue <span class="keyword">from</span> 'vue';</span><br><span class="line">import Vuex <span class="keyword">from</span> 'vuex';</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store({</span><br><span class="line">    <span class="keyword">state</span>: {</span><br><span class="line">        name: '张三',</span><br><span class="line">        number: <span class="number">0</span>,</span><br><span class="line">    },</span><br><span class="line">    mutations: { // 增加nutations属性</span><br><span class="line">        <span class="built_in">set</span>Number(<span class="keyword">state</span>) {  // 增加一个mutations的方法，方法的作用是让num从<span class="number">0</span>变成<span class="number">5</span>，<span class="keyword">state</span>是必须默认参数</span><br><span class="line">            <span class="keyword">state</span>.number = <span class="number">5</span>;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> store;</span><br></pre></td></tr></tbody></table></figure><p><strong>修改App.vue</strong>  </p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;script&gt;</span></span><br><span class="line">export <span class="keyword">default</span> {</span><br><span class="line">    mounted() {</span><br><span class="line">        console.<span class="keyword">log</span>(`旧值：${this.<span class="variable">$store</span>.<span class="keyword">state</span>.number}`);</span><br><span class="line">        this.<span class="variable">$store</span>.commit('<span class="built_in">set</span>Number');</span><br><span class="line">        console.<span class="keyword">log</span>(`新值：${this.<span class="variable">$store</span>.<span class="keyword">state</span>.number}`);</span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>运行项目，查看控制台：</strong><br><img src="/2022/01/21/vue/vuex/vuex-qian-xi/2.jpg" alt=""><br>🤡 以上是简单实现mutations的方法，是没有传参的，如果我们想传不固定的参数怎么办？接下来教你解决<br><strong>修改store/index.js</strong>  </p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Vue <span class="keyword">from</span> 'vue';</span><br><span class="line">import Vuex <span class="keyword">from</span> 'vuex';</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store({</span><br><span class="line">    <span class="keyword">state</span>: {</span><br><span class="line">        name: '张三',</span><br><span class="line">        number: <span class="number">0</span>,</span><br><span class="line">    },</span><br><span class="line">    mutations: {</span><br><span class="line">        <span class="built_in">set</span>Number(<span class="keyword">state</span>) {</span><br><span class="line">            <span class="keyword">state</span>.number = <span class="number">5</span>;</span><br><span class="line">        },</span><br><span class="line">        <span class="built_in">set</span>NumberIsWhat(<span class="keyword">state</span>, number) { // 增加一个带参数的mutations方法</span><br><span class="line">            <span class="keyword">state</span>.number = number;</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> store;</span><br></pre></td></tr></tbody></table></figure><p><strong>修改App.vue</strong>  </p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;script&gt;</span></span><br><span class="line">export <span class="keyword">default</span> {</span><br><span class="line">    mounted() {</span><br><span class="line">        console.<span class="keyword">log</span>(`旧值：${this.<span class="variable">$store</span>.<span class="keyword">state</span>.number}`);</span><br><span class="line">        this.<span class="variable">$store</span>.commit('<span class="built_in">set</span>NumberIsWhat', <span class="number">666</span>);</span><br><span class="line">        console.<span class="keyword">log</span>(`新值：${this.<span class="variable">$store</span>.<span class="keyword">state</span>.number}`);</span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>运行项目，查看控制台：</strong><br><img src="/2022/01/21/vue/vuex/vuex-qian-xi/1.jpg" alt=""><br>没有问题！</p><p>注意：上面的这种传参的方式虽然可以达到目的，但是并不推荐，官方建议传递一个对象进去，这样看起来更美观，对象的名字你可以随意命名，但我们一般命名为payload，代码如下：</p><p><strong>修改store/index.js</strong></p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: {</span><br><span class="line">    <span class="built_in">set</span>Number(<span class="keyword">state</span>) {</span><br><span class="line">        <span class="keyword">state</span>.number = <span class="number">5</span>;</span><br><span class="line">    },</span><br><span class="line">    <span class="built_in">set</span>NumberIsWhat(<span class="keyword">state</span>, payload) { // 增加一个带参数的mutations方法，并且官方建议payload为一个对象</span><br><span class="line">        <span class="keyword">state</span>.number = payload.number;</span><br><span class="line">    },</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><strong>修改App.vue</strong></p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;script&gt;</span></span><br><span class="line">export <span class="keyword">default</span> {</span><br><span class="line">    mounted() {</span><br><span class="line">        console.<span class="keyword">log</span>(`旧值：${this.<span class="variable">$store</span>.<span class="keyword">state</span>.number}`);</span><br><span class="line">        this.<span class="variable">$store</span>.commit('<span class="built_in">set</span>NumberIsWhat', { number: <span class="number">666</span> });  // 调用的时候也需要传递一个对象</span><br><span class="line">        console.<span class="keyword">log</span>(`新值：${this.<span class="variable">$store</span>.<span class="keyword">state</span>.number}`);</span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>此时可以得到和之前一样的效果，并且代码更加美观！<br>😱 这里说一条重要原则：Mutations里面的函数必须是同步操作，不能包含异步操作！（别急，后面会讲到异步）</p><p>😱 这里说一条重要原则：Mutations里面的函数必须是同步操作，不能包含异步操作！（别急，后面会讲到异步）</p><p>😱 这里说一条重要原则：Mutations里面的函数必须是同步操作，不能包含异步操作！（别急，后面会讲到异步）</p><p>好的，记住这个重要原则，我们再说一个小技巧：</p><p>🤖 官方建议：就像最开始的mapState和mapGetters一样，我们在组件中可以使用mapMutations以代替this.$store.commit(‘XXX’)，是不是很方便呢？</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> { mapMutations } <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line">    mounted() {</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.setNumberIsWhat({ number: <span class="number">999</span> });</span></span><br><span class="line">    },</span><br><span class="line"><span class="actionscript">    methods: {   <span class="comment">// 注意，mapMutations是解构到methods里面的，而不是计算属性了</span></span></span><br><span class="line"><span class="actionscript">        ...mapMutations([<span class="string">'setNumberIsWhat'</span>]),</span></span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>此时可以得到和之前一样的效果，并且代码又美观了一点！</p><p>当然你也可以给它叫别名，取外号，就像这样：</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">methods:</span>{</span><br><span class="line">    ...mapMutations({ <span class="string">setNumberIsAlias:</span> <span class="string">'setNumberIsWhat'</span> }),   <span class="comment">// 赋别名的话，这里接收对象，而不是数组</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>🤔 OK，关于Mutation的介绍大致就是这样，另外你也掌握了在定义mutations方法的时候有无参数应该怎么写；并且听取了官方建议，使用mapMutations解构到你的组件内部的methods里，这样你就可以很简单的使用mutations方法啦！</p><p>🤪 上面提到，Mutations只能进行同步操作，所以，我们马上开始下一节，看看使用Actions进行异步操作的时候应该注意什么！</p><h4 id="了解异步操作：Actions"><a href="#了解异步操作：Actions" class="headerlink" title="了解异步操作：Actions"></a>了解异步操作：Actions</h4><p>😆 OK！本节我们来学习使用Actions，Actions存在的意义是假设你在修改state的时候有异步操作，vuex作者不希望你将异步操作放在Mutations中，所以就给你设置了一个区域，让你放异步操作，这就是Actions</p><p>😛 我们直接上一个代码</p><p><strong>修改store/index.js</strong>  </p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store({</span><br><span class="line">    <span class="keyword">state</span>: {</span><br><span class="line">        name: '张三',</span><br><span class="line">        number: <span class="number">0</span>,</span><br><span class="line">    },</span><br><span class="line">    mutations: {</span><br><span class="line">        <span class="built_in">set</span>NumberIsWhat(<span class="keyword">state</span>, payload) {</span><br><span class="line">            <span class="keyword">state</span>.number = payload.number;</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">    actions: {   // 增加actions属性</span><br><span class="line">        <span class="built_in">set</span>Num(content) {  // 增加<span class="built_in">set</span>Num方法，默认第一个参数是content，其值是复制的一份store</span><br><span class="line">            return new Promise(resolve =&gt; {  // 我们模拟一个异步操作，<span class="number">1</span>秒后修改number为<span class="number">888</span></span><br><span class="line">                <span class="built_in">set</span>Timeout(() =&gt; {</span><br><span class="line">                    content.commit('<span class="built_in">set</span>NumberIsWhat', { number: <span class="number">888</span> });</span><br><span class="line">                    resolve();</span><br><span class="line">                }, <span class="number">1000</span>);</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><strong>修改App.vue</strong>  </p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">async mounted() {</span><br><span class="line">    console.<span class="keyword">log</span>(`旧值：${this.<span class="variable">$store</span>.<span class="keyword">state</span>.number}`);</span><br><span class="line">    await this.<span class="variable">$store</span>.dispatch('<span class="built_in">set</span>Num');</span><br><span class="line">    console.<span class="keyword">log</span>(`新值：${this.<span class="variable">$store</span>.<span class="keyword">state</span>.number}`);</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><strong>运行项目，查看控制台：</strong><br><img src="/2022/01/21/vue/vuex/vuex-qian-xi/3.jpg" alt=""><br>🤓 看了例子，是不是明白了，action就是去提交mutation的，什么异步操作都在action中消化了，最后再去提交mutation的。</p><p>😼 当然，你可以模仿mutation进行传参，就像下面这样：</p><p><strong>修改store/index.js</strong></p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">actions: {</span><br><span class="line">    setNum(content, payload) {   <span class="comment">// 增加payload参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> {</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">                content.commit(<span class="string">'setNumberIsWhat'</span>, { <span class="built_in">number</span>: payload.number });</span><br><span class="line">                resolve();</span><br><span class="line">            }, <span class="number">1000</span>);</span><br><span class="line">        });</span><br><span class="line">    },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>修改App.vue</strong></p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">async mounted() {</span><br><span class="line">    console.<span class="keyword">log</span>(`旧值：${this.<span class="variable">$store</span>.<span class="keyword">state</span>.number}`);</span><br><span class="line">    await this.<span class="variable">$store</span>.dispatch('<span class="built_in">set</span>Num', { number: <span class="number">611</span> });</span><br><span class="line">    console.<span class="keyword">log</span>(`新值：${this.<span class="variable">$store</span>.<span class="keyword">state</span>.number}`);</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><strong>运行项目，查看控制台</strong><br><img src="/2022/01/21/vue/vuex/vuex-qian-xi/4.jpg" alt=""><br>没有任何问题！</p><p>🤖 官方建议1：你如果不想一直使用this.$store.dispatch(‘XXX’)这样的写法调用action，你可以采用mapActions的方式，把相关的actions解构到methods中，用this直接调用：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> { mapActions } <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line">    methods: {</span><br><span class="line"><span class="actionscript">        ...mapActions([<span class="string">'setNum'</span>]),   <span class="comment">// 就像这样，解构到methods中</span></span></span><br><span class="line">    },</span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> mounted() {</span></span><br><span class="line"><span class="javascript">        <span class="keyword">await</span> <span class="keyword">this</span>.setNum({ <span class="attr">number</span>: <span class="number">123</span> });  <span class="comment">// 直接这样调用即可</span></span></span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当然，你也可以取别名，取外号，就像下面这样：</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...mapActions({ <span class="string">setNumAlias:</span> <span class="string">'setNum'</span> }),   <span class="comment">// 赋别名的话，这里接收对象，而不是数组</span></span><br></pre></td></tr></tbody></table></figure><p>🤖 官方建议2：在store/index.js中的actions里面，方法的形参可以直接将commit解构出来，这样可以方便后续操作：  </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">actions: {</span><br><span class="line">    setNum({ commit }) {   <span class="comment">// 直接将content结构掉，解构出commit，下面就可以直接调用了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> {</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">                commit(<span class="string">'XXXX'</span>);  <span class="comment">// 直接调用</span></span><br><span class="line">                resolve();</span><br><span class="line">            }, <span class="number">1000</span>);</span><br><span class="line">        });</span><br><span class="line">    },</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>🤠 OK，看到这里，你应该明白action在vuex的位置了吧，什么时候该用action，什么时候不用它，你肯定有了自己的判断，最主要的判断条件就是我要做的操作是不是异步，这也是action存在的本质。当然，你不要将action和mutation混为一谈，action其实就是mutation的上一级，在action这里处理完异步的一些操作后，后面的修改state就交给mutation去做了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>🤗 好！大致对vuex的讲解就到这里了，看到这里你肯定对vuex不陌生了，你会安装它，配置它，读取state的值，甚至修饰读(Getter)，然后你会修改里面的值了(Mutation)，假如你有异步操作并且需要修改state，那你就要使用Action，这样，你就可以在你的项目中用起来vuex啦！加油吧！🤔</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-数据通信使用记录</title>
      <link href="/2022/01/19/vue/shu-ju-tong-xin/shi-yong-ji-lu/"/>
      <url>/2022/01/19/vue/shu-ju-tong-xin/shi-yong-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="数据通信的使用"><a href="#数据通信的使用" class="headerlink" title="数据通信的使用"></a>数据通信的使用</h2><h3 id="eventBus"><a href="#eventBus" class="headerlink" title="eventBus"></a>eventBus</h3><blockquote><p>EventBus 又称为事件总线。在Vue中可以使用 EventBus 来作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的“灾难”，因此才需要更完善的Vuex作为状态管理中心，将通知的概念上升到共享状态层次。   </p></blockquote><h3 id="使用event-bus注意事项"><a href="#使用event-bus注意事项" class="headerlink" title="使用event-bus注意事项"></a>使用event-bus注意事项</h3><p>1、前面提到过，如果使用不善，EventBus会是一种灾难，大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的EventBus会被移除，这样就导致业务走不下去。还要就是如果业务有反复操作的页面，EventBus在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理EventBus在项目中的关系。通常会用到，在vue页面销毁时，同时移除EventBus事件监听。<br>2、等子组件$on去注册事件后就执行了父组件$emit 所以接收不到信息，配合嵌套组件的生命周期<br>3、当点击销毁子组件的时候 子组件还能接收到数据吗？对应的回调函数还能在执行吗？ 答案是 会，事件订阅功能是$eventBus对象完成的，与组件无关，当你点击销毁后 再点击创建又会多了一个订阅事件，依次类推每次点击新建后都会多一个订阅事件<br>4、 在子组件销毁后进行取消订阅事件</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">destroyed () {</span><br><span class="line">&nbsp;<span class="regexp">//</span> 取消对bus事件的监听</span><br><span class="line">&nbsp;this.<span class="variable">$bus</span>.<span class="variable">$off</span>(<span class="string">'bus'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="全局使用方法"><a href="#全局使用方法" class="headerlink" title="全局使用方法"></a>全局使用方法</h3><p>1、定义一个eventBus  </p><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">&nbsp;install(Vue){</span><br><span class="line">&nbsp;&nbsp;Vue.prototype.Bus = <span class="keyword">new</span> Bus()</span><br><span class="line">&nbsp;}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、在main.js中引入eventBus  </p><figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vueBus <span class="keyword">from</span> <span class="string">'@/utils/vueBus.js'</span></span><br><span class="line">Vue.use(vueBus)</span><br></pre></td></tr></tbody></table></figure><p>3、新建一个路由组件同时在建2个组件  </p><figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">Component-A</span>&gt;</span><span class="tag">&lt;/<span class="name">Component-A</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">Component-B</span>&gt;</span><span class="tag">&lt;/<span class="name">Component-B</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">import Component-A from './components/Component-A';</span></span><br><span class="line"><span class="xml">import Component-B from './components/Component-B';</span></span><br><span class="line"><span class="xml">export default </span><span class="xquery">{</span></span><br><span class="line"><span class="xquery"><span class="built_in">name</span>:<span class="string">'vueBus'</span>,</span></span><br><span class="line"><span class="xquery">data(){</span></span><br><span class="line"><span class="xquery"><span class="keyword">return</span> {</span></span><br><span class="line"><span class="xquery"></span></span><br><span class="line"><span class="xquery">}</span><span class="xml"></span></span><br><span class="line"><span class="xml">}</span></span><br><span class="line"><span class="xml">}</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>4、Component-A组件发送事件  </p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&nbsp;&lt;div class="g1-component_warp"&gt;</span><br><span class="line">&nbsp;&nbsp;&lt;a-button @click="sendData"&gt;发送数据&lt;/a-button&gt;</span><br><span class="line">&nbsp;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&nbsp;export default {</span><br><span class="line">&nbsp;&nbsp;methods:{</span><br><span class="line">&nbsp;&nbsp;&nbsp;sendData(){</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;this.Bus.$emit('aa', '组件1发送的数据')</span><br><span class="line">&nbsp;&nbsp;&nbsp;}</span><br><span class="line">&nbsp;&nbsp;}</span><br><span class="line">&nbsp;}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>5、Component-B组件接收事件  </p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&nbsp;&lt;div class="g1-component_warp"&gt;</span><br><span class="line">&nbsp;&nbsp;&lt;div&gt;组件2监听组件1 emit的数据: &lt;font color="red"&gt;{{msg}}&lt;/font&gt;&lt;/div&gt;</span><br><span class="line">&nbsp;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&nbsp;export default {</span><br><span class="line">&nbsp;&nbsp;data(){</span><br><span class="line">&nbsp;&nbsp;&nbsp;return {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;msg: ''</span><br><span class="line">&nbsp;&nbsp;&nbsp;}</span><br><span class="line">&nbsp;&nbsp;},</span><br><span class="line">&nbsp;&nbsp;mounted(){</span><br><span class="line">&nbsp;&nbsp;&nbsp;this.Bus.$on('aa', arg=&gt; this.msg = arg)</span><br><span class="line">&nbsp;&nbsp;}</span><br><span class="line">&nbsp;}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-mixins记录</title>
      <link href="/2022/01/18/vue/vue-mixins/vue-mixins-hun-ru-de-shi-yong-ji-lu/"/>
      <url>/2022/01/18/vue/vue-mixins/vue-mixins-hun-ru-de-shi-yong-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-mixins记录"><a href="#vue-mixins记录" class="headerlink" title="vue-mixins记录"></a>vue-mixins记录</h1><blockquote><p>mixins（混入）就是定义了一部分公共的方法、计算属性或者钩子函数等 vue 组件中的可复用功能，然后混合进各个组件中使用。下面我们具体来看看怎么使用。</p></blockquote><p>1、在项目中定义mixins</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TestMixins = {</span><br><span class="line">&nbsp;<span class="keyword">data</span>() {</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">return</span> {</span><br><span class="line">&nbsp;&nbsp;&nbsp;msg1: <span class="string">'我是 mixins 中的字符串 msg1'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;msg2: <span class="string">'我是 mixins 中的字符串 msg2'</span></span><br><span class="line">&nbsp;&nbsp;}</span><br><span class="line">&nbsp;},</span><br><span class="line">&nbsp;created() {</span><br><span class="line">&nbsp;&nbsp;console.log(<span class="string">'我是 mixins 中的钩子函数 created'</span>)</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">this</span>.hello()</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">this</span>.say()</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">this</span>.pay()</span><br><span class="line">&nbsp;},</span><br><span class="line">&nbsp;methods: {</span><br><span class="line">&nbsp;&nbsp;hello() {</span><br><span class="line">&nbsp;&nbsp;&nbsp;console.log(<span class="string">'我是 mixins 中的函数 hello'</span>)</span><br><span class="line">&nbsp;&nbsp;},</span><br><span class="line">&nbsp;&nbsp;say() {</span><br><span class="line">&nbsp;&nbsp;&nbsp;console.log(<span class="string">'我是 mixins 中的函数 say'</span>)</span><br><span class="line">&nbsp;&nbsp;}</span><br><span class="line">&nbsp;}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、在使用的组件中导入:</p><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TestMixins <span class="keyword">from</span> <span class="string">'@/mixins/TestMixins'</span>；</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">&nbsp;mixins: [TestMixins],</span><br><span class="line">&nbsp;data() {</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">return</span> {</span><br><span class="line">&nbsp;&nbsp;&nbsp;msg1: <span class="string">'我是组件中的字符串 msg1'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;sex: <span class="string">'我是组件中的字符串 sex'</span></span><br><span class="line">&nbsp;&nbsp;}</span><br><span class="line">&nbsp;},</span><br><span class="line">&nbsp;created() {</span><br><span class="line">&nbsp;&nbsp;<span class="built_in">console</span>.log(<span class="string">'我是组件中的钩子函数 created'</span>)</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">this</span>.hello()</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">this</span>.say()</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">this</span>.pay()</span><br><span class="line">&nbsp;},</span><br><span class="line">&nbsp;methods: {</span><br><span class="line">&nbsp;&nbsp;hello() {</span><br><span class="line">&nbsp;&nbsp;&nbsp;<span class="built_in">console</span>.log(<span class="string">'我是组件中的函数 hello'</span>)</span><br><span class="line">&nbsp;&nbsp;},</span><br><span class="line">&nbsp;&nbsp;pay() {</span><br><span class="line">&nbsp;&nbsp;&nbsp;<span class="built_in">console</span>.log(<span class="string">'我是组件中的函数 pay'</span>)</span><br><span class="line">&nbsp;&nbsp;}</span><br><span class="line">&nbsp;}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>总结 <ul><li>混入对象的钩子将在组件自身钩子之前调用。</li><li>值为对象的选项，例如 data、methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。</li><li>混入对象中可以使用和调用组件自身变量和函数，且与在组件自身中使用情况一样。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-mixins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由守卫</title>
      <link href="/2022/01/04/vue/vue-router/vue-lu-you/"/>
      <url>/2022/01/04/vue/vue-router/vue-lu-you/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-router中beforeEach"><a href="#vue-router中beforeEach" class="headerlink" title="vue-router中beforeEach"></a>vue-router中beforeEach</h1><blockquote><p>导航守卫又称路由守卫，实时监控路由跳转时的过程，在路由跳转的各个过程执行相应的操作，类似于生命周期函数，在开发过程中经常被使用，比如用户点击一个页面，如果未登录就调到登录页面，已登录就让用户正常进入。  </p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><blockquote><p>全局路由一共分为三类：全局守卫，路由独享的守卫，组件内的守卫。</p></blockquote><h4 id="一、全局守卫"><a href="#一、全局守卫" class="headerlink" title="一、全局守卫"></a>一、全局守卫</h4><ul><li>全局守卫有三种：<ul><li>router.beforeEach（全局前置守卫）</li><li>router.beforeResolve（全局解析守卫）</li><li>router.afterEach（全局后置守卫）</li></ul></li></ul><p>1、 router.beforeEach（全局前置守卫）</p><blockquote><p>以一个简单的例子来解释router.beforeEach假设我们现在做一个这样的需求，用户在未登录的时候进入任意页面，我们就让用户跳转到登录页面，在已登录的时候让用户正常跳转到点击的页面。准备好三个组件：home.vue,login.vue,about.vue  </p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">home.vue的内容：</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$router.push('/about')"</span>&gt;</span>去关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'home'</span>,</span></span><br><span class="line">    data() {</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> {}</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">login.vue的内容：</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"about"</span></span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">about.vue的内容：</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>关于页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"about"</span></span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、router配置文件内容：<br> </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">'@/components/home'</span></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">'@/components/login'</span></span><br><span class="line"><span class="keyword">import</span> about <span class="keyword">from</span> <span class="string">'@/components/about'</span></span><br><span class="line"> </span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="keyword">const</span> ISLOGIN = <span class="literal">true</span>   <span class="comment">//登录状态模拟</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router({</span><br><span class="line">  routes: [</span><br><span class="line">    {</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'home'</span>,</span><br><span class="line">      component: home,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      name: <span class="string">'login'</span>,</span><br><span class="line">      component: login</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      path: <span class="string">'/about'</span>,</span><br><span class="line">      name: <span class="string">'about'</span>,</span><br><span class="line">      component: about</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">})</span><br><span class="line"> </span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {   <span class="comment">//全局全局前置守卫</span></span><br><span class="line">  <span class="comment">//to : 将要进入的目标路由对象</span></span><br><span class="line">  <span class="comment">//from : 即将离开的目标路由对象</span></span><br><span class="line">  <span class="comment">//执行跳转的下一步钩子</span></span><br><span class="line">  <span class="built_in">console</span>.log(to)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span>(to.name != <span class="string">'login'</span>){ <span class="comment">//如果不是登录页面</span></span><br><span class="line">    <span class="keyword">if</span>(ISLOGIN)next()   <span class="comment">//已登录就执行跳转</span></span><br><span class="line">    <span class="keyword">else</span> next({<span class="attr">name</span>:<span class="string">'login'</span>})   <span class="comment">//否则跳转到登录页面</span></span><br><span class="line">  }<span class="keyword">else</span>{ <span class="comment">//如果是登录页面</span></span><br><span class="line">    <span class="keyword">if</span>(ISLOGIN)next({<span class="attr">name</span>:<span class="string">'/'</span>}) <span class="comment">//已登录就跳转到首页</span></span><br><span class="line">    <span class="keyword">else</span>  next()  <span class="comment">//否则正常进入登录页面</span></span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure><p></p><p>我们可以看到，每次路由跳转，router.beforeEach都会执行，并且接受三个参数</p><ul><li>to记录着将要进入的目标路由对象的信息</li><li>from记录着即将离开的目标路由对象的信息</li><li>next()表示执行下一步</li><li>router.beforeEach就是全局路由跳转时触发执行的函数</li></ul><p>3、router.beforeResolve(全局解析守卫)<br>和全局前置守卫类似，区别是在跳转被确认之前，同时在所有组件内守卫和异步路由组件都被解析之后，解析守卫才调用。</p><p>4、router.afterEach(全局后置钩子)<br>只接受to和from,不会接受 next 函数也不会改变导航本身</p><h3 id="二、路由独享守卫"><a href="#二、路由独享守卫" class="headerlink" title="二、路由独享守卫"></a>二、路由独享守卫</h3><blockquote><p>独享守卫只有一种:beforeEnter。该守卫接收的参数与全局守卫是一样的，但是该守卫只在其他路由跳转至配置有beforeEnter路由表信息时才生效。</p></blockquote><p>router配置文件内容：</p><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">   path: <span class="string">'/about'</span>,</span><br><span class="line">   name: <span class="string">'about'</span>,</span><br><span class="line">   component: about,</span><br><span class="line">   beforeEnter:<span class="function"><span class="params">(to,<span class="keyword">from</span>,next)</span>=&gt;</span>{</span><br><span class="line">      <span class="built_in">console</span>.log(to);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">from</span>);</span><br><span class="line">      next()</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h3 id="三、组件内守卫"><a href="#三、组件内守卫" class="headerlink" title="三、组件内守卫"></a>三、组件内守卫</h3><blockquote><p>组件内守卫一共有三个：<br>    beforeRouteEnter，<br>    beforeRouteUpdate，<br>    beforeRouteLeave<br>三者分别对应：进入该路由时执行，该路由中参数改变时执行，离开该路由时执行。</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>关于页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"about"</span>,</span></span><br><span class="line"><span class="javascript">    beforeRouteEnter(to, <span class="keyword">from</span>, next) {</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//进入该路由时执行</span></span></span><br><span class="line">    },</span><br><span class="line"><span class="javascript">    beforeRouteUpdate(to, <span class="keyword">from</span>, next) {</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//该路由参数更新时执行</span></span></span><br><span class="line">    },</span><br><span class="line"><span class="javascript">    beforeRouteLeave(to, <span class="keyword">from</span>, next) {</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//离开该路由时执行</span></span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react生命周期前后对比</title>
      <link href="/2021/07/20/react/sheng-ming-zhou-qi/sheng-ming-zhou-qi/"/>
      <url>/2021/07/20/react/sheng-ming-zhou-qi/sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="React16之前的生命周期"><a href="#React16之前的生命周期" class="headerlink" title="React16之前的生命周期"></a>React16之前的生命周期</h1><ul><li><p>第一阶段，初始化阶段，由ReactDOM.render()触发，初次渲染</p><figure class="highlight delphi"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constructor</span><span class="params">()</span><span class="comment">{}</span> =====&gt; 构造器</span></span><br><span class="line"><span class="function"><span class="title">componentWillMount</span><span class="params">()</span><span class="comment">{}</span> =======&gt; 组件挂载之前</span></span><br><span class="line"><span class="function"><span class="title">render</span><span class="params">()</span><span class="comment">{}</span> ======&gt; 挂载结构</span></span><br><span class="line"><span class="function"><span class="title">componentDidMount</span><span class="params">()</span><span class="comment">{}</span> =======&gt; 组件挂载后，常用钩子，一般用来做一些初始化的事情：开启定时器，发送网络请求，订阅消息</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>更新阶段,this.setSet()或父组件的render触发</p><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate() { ======<span class="function">=&gt;</span> 组件是否被更新</span><br><span class="line">&nbsp;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">componentWillUpdate(){} ======<span class="function">=&gt;</span> 组件更新前</span><br><span class="line">render(){} =====<span class="function">=&gt;</span> 挂载结构</span><br><span class="line">componentDidUpdate(){} ======<span class="function">=&gt;</span> 组件更新后</span><br><span class="line">```<span class="javascript">  </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">- 第三阶段，卸载阶段，由ReactDOM.unmountComponentAtNode()触发</span></span><br></pre></td></tr></tbody></table></figure><p>  componentWillUnmount(){} =======&gt; 组件卸载之前，常用钩子，一般用来做一些收尾事情：关闭定时器，取消订阅消息</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">综合展示：</span><br></pre></td></tr></tbody></table></figure><p>  1.setState() // 修改数据时触发更新<br>  2.forceUpdate() // 强制更新，不经过shouldComponentUpdate(){}<br>  3.componentWillReceiveProps(){} // 父组件更新引发更新</p><p>  constructor(){} =====&gt; 构造器<br>  componentWillMount(){} =======&gt; 组件挂载之前<br>  render(){} ======&gt; 挂载结构<br>  componentDidMount(){} =======&gt; 组件挂载后<br>  componentWillUnmount(){} =======&gt; 组件卸载之前</p><p>  shouldComponentUpdate() { return false } =======&gt; 组件是否被更新</p><p>  componentWillUpdate(){} =======&gt; 组件更新前<br>  componentDidUpdate(){} =======&gt; 组件更新后</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section"># React16以后的生命周期</span></span><br><span class="line"><span class="bullet">- </span>初始化阶段，只执行一次</span><br></pre></td></tr></tbody></table></figure></li></ul><p>constructor(){} //构造器<br>getDerivedStateFromProps() {}  //从Props获取派生<br>render(){} //挂载结构<br>componentDidMount(){} //组件挂载后</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 第二阶段：更新阶段，由内部<span class="keyword">this</span>.setState()或父组件render()触发</span><br></pre></td></tr></tbody></table></figure><p>getDerivedStateFromProps() {}  =====&gt; 从Props获取派生<br>shouldComponentUpdate() { return false } =======&gt; 组件是否被更新<br>render(){} ======&gt; 挂载结构<br>getSnapshotBeforeUpdate(prevProps, prevState) {} ======&gt; // 获取快照更新前<br>componentDidUpdate(){} =======&gt; 组件更新后</p><pre><code>- 第三阶段：卸载阶段，由ReactDOM.unmountComponentAtNode()触发</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bat添加软件右键打开项目</title>
      <link href="/2021/06/23/soft/bat/bat-tian-jia-ruan-jian-you-jian-da-kai-xiang-mu/"/>
      <url>/2021/06/23/soft/bat/bat-tian-jia-ruan-jian-you-jian-da-kai-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>@echo Off<br>:START<br>CLS<br>echo <em>=========================================================================</em><br>echo *                        注意: 该bat文件必须和HBuilderX.exe在同级目录  *<br>echo *                            [A]添加右键菜单                              *<br>echo *                            [D]删除右键菜单                              *<br>echo *                            [Q]退出                                      *<br>echo *                                                                         *<br>echo <em>=========================================================================</em><br>Set /P Choice=　　　　　　　请选择要进行的操作 (A/D/Q) ，然后按回车：<br>If /I “%Choice%”==”A” Goto :ADD<br>If /I “%Choice%”==”D” Goto :DEL<br>If /I “%Choice%”==”Q” Exit</p><p>START</p><p>:ADD<br>CLS<br>set str=%cd%<br>echo Windows Registry Editor Version 5.00&gt; tmp.reg<br>echo [HKEY_CLASSES_ROOT*\shell]&gt;&gt; tmp.reg<br>echo [HKEY_CLASSES_ROOT*\shell\HBuilderX]&gt;&gt; tmp.reg<br>echo @=”用Sublime Text打开”&gt;&gt; tmp.reg<br>echo “Icon”=”"%str:=\%\HBuilderX.exe",0”&gt;&gt; tmp.reg<br>echo [HKEY_CLASSES_ROOT*\shell\HBuilderX\Command]&gt;&gt; tmp.reg<br>echo @=”"%str:=\%\HBuilderX.exe" "%%1^"“&gt;&gt; tmp.reg </p><p>echo [HKEY_CLASSES_ROOT\Directory\shell\sublime]&gt;&gt; tmp.reg<br>echo @=”添加到Sublime Text工程项目”&gt;&gt; tmp.reg<br>echo “Icon”=”"%str:=\%\HBuilderX.exe",0”&gt;&gt; tmp.reg<br>echo [HKEY_CLASSES_ROOT\Directory\shell\sublime\Command]&gt;&gt; tmp.reg<br>echo @=”"%str:=\%\HBuilderX.exe" "%%1^"“&gt;&gt; tmp.reg </p><p>echo [HKEY_CLASSES_ROOT\Directory\Background\shell\sublime]&gt;&gt; tmp.reg<br>echo @=”添加到Sublime Text工程项目”&gt;&gt; tmp.reg<br>echo “Icon”=”"%str:=\%\HBuilderX.exe",0”&gt;&gt; tmp.reg<br>echo [HKEY_CLASSES_ROOT\Directory\Background\shell\sublime\Command]&gt;&gt; tmp.reg<br>echo @=”"%str:=\%\HBuilderX.exe" "%%V^"“&gt;&gt; tmp.reg<br>echo <em>=========================================================================</em><br>echo *                                                                         *<br>echo *   正在将生成的注册信息写入注册表，请点击“是”键钮！                      *<br>echo *                                                                         *<br>echo <em>=========================================================================</em><br>tmp.reg<br>del tmp.reg<br>GOTO :START</p><p>:DEL<br>echo Windows Registry Editor Version 5.00&gt; tmp.reg<br>echo [-HKEY_CLASSES_ROOT*\shell\HBuilderX]&gt;&gt; tmp.reg<br>echo [-HKEY_CLASSES_ROOT\Directory\shell\HBuilderX]&gt;&gt; tmp.reg<br>echo [-HKEY_CLASSES_ROOT\Directory\Background\shell\HBuilderX]&gt;&gt; tmp.reg<br>tmp.reg<br>del tmp.reg<br>GOTO :START</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>url-loader+html-loader处理图片不能正常打开</title>
      <link href="/2021/06/06/webpack/chang-jian-wen-ti/url-loader-html-loader-chu-li-tu-pian-bu-neng-zheng-chang-da-kai/"/>
      <url>/2021/06/06/webpack/chang-jian-wen-ti/url-loader-html-loader-chu-li-tu-pian-bu-neng-zheng-chang-da-kai/</url>
      
        <content type="html"><![CDATA[<h3 id="url-loader-html-loader处理图片不能正常打开"><a href="#url-loader-html-loader处理图片不能正常打开" class="headerlink" title="url-loader+html-loader处理图片不能正常打开"></a>url-loader+html-loader处理图片不能正常打开</h3><p>在配置url-loader和html-loader的时候都需要配置esModule: false闭url-loader的es6模块化，使用commonjs解析  </p><p><img src="/2021/06/06/webpack/chang-jian-wen-ti/url-loader-html-loader-chu-li-tu-pian-bu-neng-zheng-chang-da-kai/1.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题锦集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5+webpack-dev-server兼容</title>
      <link href="/2021/06/06/webpack/chang-jian-wen-ti/webpack5-webpack-dev-server-jian-rong/"/>
      <url>/2021/06/06/webpack/chang-jian-wen-ti/webpack5-webpack-dev-server-jian-rong/</url>
      
        <content type="html"><![CDATA[<h3 id="安装webpack-dev-server-报错Error-Cannot-find-module-‘webpack-cli-bin-config-yargs’"><a href="#安装webpack-dev-server-报错Error-Cannot-find-module-‘webpack-cli-bin-config-yargs’" class="headerlink" title="安装webpack-dev-server 报错Error:Cannot find module ‘webpack-cli/bin/config-yargs’"></a>安装webpack-dev-server 报错Error:Cannot find module ‘webpack-cli/bin/config-yargs’</h3><p><img src="/2021/06/06/webpack/chang-jian-wen-ti/webpack5-webpack-dev-server-jian-rong/20210519111919882.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题锦集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node项目使用import报错问题</title>
      <link href="/2021/05/06/node/node-shi-yong-import-bao-cuo-wen-ti/"/>
      <url>/2021/05/06/node/node-shi-yong-import-bao-cuo-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="在express框架中运用import-export"><a href="#在express框架中运用import-export" class="headerlink" title="在express框架中运用import export"></a>在express框架中运用import export</h1><blockquote><p>在新搭建的基于node.js的express框架时，不能直接运用import/export，否则会报错如下  </p></blockquote><p><img src="/2021/05/06/node/node-shi-yong-import-bao-cuo-wen-ti/1.png" alt=""><br><img src="/2021/05/06/node/node-shi-yong-import-bao-cuo-wen-ti/2.png" alt=""> </p><p>所以需要在入口文件里面导入babel依赖<br>1* yarn add babel-register babel-preset-env –save-dev<br>2* 在./bin/www文件的第一行添加如下代码  </p><pre><code>require('babel-register')({  presets: ['env']});</code></pre><p>3* npm start启动项目，已可以正常运行了  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ant-design时设置DatePicker日期控件中文显示</title>
      <link href="/2021/04/30/javascript/moment/ant-design-shi-she-zhi-datepicker-ri-qi-kong-jian-zhong-wen-xian-shi/"/>
      <url>/2021/04/30/javascript/moment/ant-design-shi-she-zhi-datepicker-ri-qi-kong-jian-zhong-wen-xian-shi/</url>
      
        <content type="html"><![CDATA[<ul><li>方式一：在组件中单独设置  <pre><code>import locale from 'antd/lib/date-picker/locale/zh_CN'; &lt;DatePicker locale={locale} /&gt;;</code></pre></li><li>方法二：全局设置  <blockquote><p>注意：DatePicker、MonthPicker、RangePicker、WeekPicker 部分 locale 是从 value 中读取，所以请先正确设置 moment 的 locale</p></blockquote><figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认语言为 en-US，如果你需要设置其他语言，推荐在入口文件全局设置 locale</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/zh-cn'</span>;</span><br><span class="line">moment.locale(<span class="string">'zh-cn'</span>);</span><br><span class="line"> </span><br><span class="line">&lt;DatePicker defaultValue={moment(<span class="string">'2015-01-01'</span>, <span class="string">'YYYY-MM-DD'</span>)} /&gt;;</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>以前使用这种方法没有问题，但是最近这样配置的时候出现月和周不能显示中文<br><img src="/2021/04/30/javascript/moment/ant-design-shi-she-zhi-datepicker-ri-qi-kong-jian-zhong-wen-xian-shi/1.jpg" alt=""></p><ul><li><p>现在的方法  </p><ul><li><p>新建一个globals.js文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/zh-cn'</span>;  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">&nbsp; install(Vue, options) {</span><br><span class="line">&nbsp;&nbsp; Vue.prototype.momentUpdate = <span class="function"><span class="keyword">function</span>(<span class="params">moment</span>)</span>{</span><br><span class="line">&nbsp;&nbsp;&nbsp; moment.locale(<span class="string">'zh-cn'</span>, {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; months: <span class="string">'一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'</span>.split(<span class="string">'_'</span>),</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; monthsShort: <span class="string">'1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'</span>.split(<span class="string">'_'</span>),</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; weekdays: <span class="string">'星期日_星期一_星期二_星期三_星期四_星期五_星期六'</span>.split(<span class="string">'_'</span>),</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; weekdaysShort: <span class="string">'周日_周一_周二_周三_周四_周五_周六'</span>.split(<span class="string">'_'</span>),</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; weekdaysMin: <span class="string">'日_一_二_三_四_五_六'</span>.split(<span class="string">'_'</span>),</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; longDateFormat: {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LT: <span class="string">'Ah点mm分'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LTS: <span class="string">'Ah点m分s秒'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L: <span class="string">'YYYY-MM-DD'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LL: <span class="string">'YYYY年MMMD日'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LLL: <span class="string">'YYYY年MMMD日Ah点mm分'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LLLL: <span class="string">'YYYY年MMMD日ddddAh点mm分'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l: <span class="string">'YYYY-MM-DD'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ll: <span class="string">'YYYY年MMMD日'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lll: <span class="string">'YYYY年MMMD日Ah点mm分'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; llll: <span class="string">'YYYY年MMMD日ddddAh点mm分'</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; meridiemParse: <span class="regexp">/凌晨|早上|上午|中午|下午|晚上/</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; meridiemHour: <span class="function"><span class="keyword">function</span> (<span class="params">h, meridiem</span>) </span>{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">let</span> hour = h;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">if</span> (hour === <span class="number">12</span>) {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hour = <span class="number">0</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">if</span> (meridiem === <span class="string">'凌晨'</span> || meridiem === <span class="string">'早上'</span> ||</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; meridiem === <span class="string">'上午'</span>) {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> hour;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <span class="keyword">else</span> <span class="keyword">if</span> (meridiem === <span class="string">'下午'</span> || meridiem === <span class="string">'晚上'</span>) {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> hour + <span class="number">12</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <span class="keyword">else</span> {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// '中午'</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> hour &gt;= <span class="number">11</span> ? hour : hour + <span class="number">12</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; meridiem: <span class="function"><span class="keyword">function</span> (<span class="params">hour, minute, isLower</span>) </span>{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">const</span> hm = hour * <span class="number">100</span> + minute;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">if</span> (hm &lt; <span class="number">600</span>) {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="string">'凌晨'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <span class="keyword">else</span> <span class="keyword">if</span> (hm &lt; <span class="number">900</span>) {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="string">'早上'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <span class="keyword">else</span> <span class="keyword">if</span> (hm &lt; <span class="number">1130</span>) {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="string">'上午'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <span class="keyword">else</span> <span class="keyword">if</span> (hm &lt; <span class="number">1230</span>) {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="string">'中午'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <span class="keyword">else</span> <span class="keyword">if</span> (hm &lt; <span class="number">1800</span>) {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="string">'下午'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <span class="keyword">else</span> {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="string">'晚上'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; calendar: {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sameDay: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="keyword">this</span>.minutes() === <span class="number">0</span> ? <span class="string">'[今天]Ah[点整]'</span> : <span class="string">'[今天]LT'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nextDay: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="keyword">this</span>.minutes() === <span class="number">0</span> ? <span class="string">'[明天]Ah[点整]'</span> : <span class="string">'[明天]LT'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastDay: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="keyword">this</span>.minutes() === <span class="number">0</span> ? <span class="string">'[昨天]Ah[点整]'</span> : <span class="string">'[昨天]LT'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nextWeek: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">let</span> startOfWeek, prefix;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; startOfWeek = moment().startOf(<span class="string">'week'</span>);</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prefix = <span class="keyword">this</span>.diff(startOfWeek, <span class="string">'days'</span>) &gt;= <span class="number">7</span> ? <span class="string">'[下]'</span> : <span class="string">'[本]'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="keyword">this</span>.minutes() === <span class="number">0</span> ? prefix + <span class="string">'dddAh点整'</span> : prefix + <span class="string">'dddAh点mm'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastWeek: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">let</span> startOfWeek, prefix;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; startOfWeek = moment().startOf(<span class="string">'week'</span>);</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prefix = <span class="keyword">this</span>.unix() &lt; startOfWeek.unix() ? <span class="string">'[上]'</span> : <span class="string">'[本]'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> <span class="keyword">this</span>.minutes() === <span class="number">0</span> ? prefix + <span class="string">'dddAh点整'</span> : prefix + <span class="string">'dddAh点mm'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sameElse: <span class="string">'LL'</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; ordinalParse: <span class="regexp">/\d{1,2}(日|月|周)/</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; ordinal: <span class="function"><span class="keyword">function</span> (<span class="params">number, period</span>) </span>{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">switch</span> (period) {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">case</span> <span class="string">'DDD'</span>:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> number + <span class="string">'日'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> number + <span class="string">'月'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">case</span> <span class="string">'w'</span>:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">case</span> <span class="string">'W'</span>:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> number + <span class="string">'周'</span>;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">default</span>:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="keyword">return</span> number;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; relativeTime: {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; future: <span class="string">'%s内'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; past: <span class="string">'%s前'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s: <span class="string">'几秒'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m: <span class="string">'1 分钟'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mm: <span class="string">'%d 分钟'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; h: <span class="string">'1 小时'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hh: <span class="string">'%d 小时'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d: <span class="string">'1 天'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dd: <span class="string">'%d 天'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M: <span class="string">'1 个月'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MM: <span class="string">'%d 个月'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y: <span class="string">'1 年'</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yy: <span class="string">'%d 年'</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; },</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; week: {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dow: <span class="number">1</span>, <span class="comment">// Monday is the first day of the week.</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doy: <span class="number">4</span>  <span class="comment">// The week that contains Jan 4th is the first week of the year.</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp; }</span><br><span class="line">&nbsp;&nbsp;&nbsp; });</span><br><span class="line">&nbsp;&nbsp; }(moment);</span><br><span class="line">&nbsp; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>main.js全局引入</p><figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//main.js中引入</span></span><br><span class="line"><span class="keyword">import</span> globals <span class="keyword">from</span> <span class="string">'@/utils/globals'</span></span><br><span class="line">Vue.use(globals);</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> moment js vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
