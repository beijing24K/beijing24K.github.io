{"meta":{"title":"张本富的博客","subtitle":"人有的时候不能太惯着自己","description":"北京应用技术大学/海南职业技术学院 | 电子商务 | 视觉传达设计","author":"本富","url":"http://mr-zhangbf.github.io","root":"/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2021-04-19T06:35:51.723Z","comments":true,"path":"404.html","permalink":"http://mr-zhangbf.github.io/404.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"about","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-22T02:41:32.731Z","comments":true,"path":"about/index.html","permalink":"http://mr-zhangbf.github.io/about/index.html","excerpt":"","text":"教育经历1 北京应用技术大学 电子商务 联系方式 电子邮箱 972948137@qq.com 地址安徽省合肥市经开区 QQ972948137 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"书单","date":"2021-04-22T00:36:54.700Z","updated":"2021-04-22T00:36:54.700Z","comments":false,"path":"books/index.html","permalink":"http://mr-zhangbf.github.io/books/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"archives","date":"2019-08-10T08:39:20.000Z","updated":"2021-04-19T06:35:51.727Z","comments":true,"path":"archives/index.html","permalink":"http://mr-zhangbf.github.io/archives/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-08-10T08:39:20.000Z","updated":"2021-04-19T06:35:51.727Z","comments":true,"path":"categories/index.html","permalink":"http://mr-zhangbf.github.io/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"contact","date":"2019-08-05T09:17:02.000Z","updated":"2021-04-20T02:03:57.052Z","comments":true,"path":"contact/index.html","permalink":"http://mr-zhangbf.github.io/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 本富の友链信息 博客名称: 本富の博客 博客网址: https://sunhwee.com 博客头像: http://sunhwee.com/hwsun.jpg 博客介绍: UESTC CVer！ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"友情链接","date":"2022-01-22T02:47:33.411Z","updated":"2022-01-22T02:47:33.411Z","comments":true,"path":"links/index.html","permalink":"http://mr-zhangbf.github.io/links/index.html","excerpt":"","text":"友情链接11 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"Repositories","date":"2021-04-22T00:36:54.701Z","updated":"2021-04-22T00:36:54.701Z","comments":false,"path":"repository/index.html","permalink":"http://mr-zhangbf.github.io/repository/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"相册","date":"2021-04-19T06:35:51.729Z","updated":"2021-04-19T06:35:51.729Z","comments":true,"path":"galleries/index.html","permalink":"http://mr-zhangbf.github.io/galleries/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2021-04-19T06:35:51.730Z","comments":true,"path":"tags/index.html","permalink":"http://mr-zhangbf.github.io/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2019-07-19T08:42:10.000Z","updated":"2022-01-22T02:39:03.026Z","comments":true,"path":"friends/index.html","permalink":"http://mr-zhangbf.github.io/friends/index.html","excerpt":"","text":"友情链接 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"背景图片3","date":"2021-04-19T06:35:51.729Z","updated":"2021-04-19T06:35:51.729Z","comments":true,"path":"galleries/背景图片3/index.html","permalink":"http://mr-zhangbf.github.io/galleries/背景图片3/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"背景图片4","date":"2021-04-19T06:35:51.730Z","updated":"2021-04-19T06:35:51.730Z","comments":true,"path":"galleries/背景图片4/index.html","permalink":"http://mr-zhangbf.github.io/galleries/背景图片4/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"promise的个人理解","slug":"javascript/promise/promise的理解","date":"2022-11-22T07:54:04.000Z","updated":"2022-11-23T01:50:09.020Z","comments":true,"path":"2022/11/22/javascript/promise/promise-de-li-jie/","link":"","permalink":"http://mr-zhangbf.github.io/2022/11/22/javascript/promise/promise-de-li-jie/","excerpt":"","text":"介绍简单从语法上讲promise是一个对象，可以获异步的一个操作结果，从语义上讲，它代表的意思是一个承诺，承诺一段时间内会给出一个结果。每个promise都有三种状态：pending(进行中)、fulilled(完成)、rejected(失败)，状态一旦改变，就不会在随着后续操作再次改变。通过new一个promise实例后，它会立即执行 12345678910let promise = new Promise(function(resolve, reject) { console.log('Promise'); resolve();});promise.then(function() { console.log('resolved.');});console.log('Hi!'); 上面代码中，Promise 新建后立即执行，所以首先输出的是Promise。然后，then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以resolved最后输出。 解决什么问题在异步操作中，往往通过回调函数来获得操作结果，如果出现多层相互嵌套就会形成回调地狱，并且代码可读性非常差。通过promise我们可以像通过操作同步代码一样去操作异步代码 它有什么缺点1、一旦创建立即执行，无法在中途进行取消；2、操作结果一旦确定就会定型后续操作无法改变状态;3、无法确定pending状态发展到那个阶段； 如何定义可以通过new一个Promise的构造函数,生成一个promise的实例对象 1234567new Promise((resolve, reject)=&gt;{&nbsp;if(/*异步操作成功*/){&nbsp;&nbsp;resolve('success')&nbsp;}else{&nbsp;&nbsp;reject('err')&nbsp;}}) Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数： 12345promise.then(function(value){&nbsp;//接受resolve(value)状态为resolved时候调用}, function(err){&nbsp;// 接受reject('err')状态为rejected时候调用}) 一个简单的例子： 12345678function tme(ms){&nbsp;return new Promise(function(resolve, reject){&nbsp;&nbsp;setTimeout(resolve, ms, 'success')&nbsp;})}tme(2000).then(function(value) =&gt; {&nbsp;console.log(res)}) 上面代码中，timeout方法返回一个Promise实例，表示一段时间以后才会发生的结果。过了指定的时间（ms参数）以后，Promise实例的状态变为resolved，就会触发then方法绑定的回调函数。 未完待续… document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":"本富"},{"title":"彻底搞明白Object.defineProperty()的使用","slug":"javascript/日常总结/defineProperty","date":"2022-07-23T03:41:07.000Z","updated":"2022-11-02T00:39:24.966Z","comments":true,"path":"2022/07/23/javascript/ri-chang-zong-jie/defineproperty/","link":"","permalink":"http://mr-zhangbf.github.io/2022/07/23/javascript/ri-chang-zong-jie/defineproperty/","excerpt":"","text":"介绍Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象 备注：应当直接在 Object 构造器对象上调用此方法，而不是在任意一个 Object 类型的实例上调用。 api的使用 1234567891011121314151617Object.defineProperty(obj, prop, descriptor)//实例var person = {&nbsp;}Object.defineProperty(person,'a',{ configurable:true,//表示对象的属性是否可以被删除，以及除value和writable特性外的其他特性是否可以被修改 enumerable:true,//可以被枚举 writable:true,//可以修改这个属性的值 value:1//定义一个初始的值为1})console.log(person)//Object {a: 1}person.a=2console.log(person)//Object {a: 2}for(var k in person){ console.log(k)//a,可以被枚举} 1、configurable 当且仅当该属性的 configurable 键值为 true 时，该属性的描述符（descriptor）才能够被改变，同时该属性也能从对应的对象上被删除,默认为 false。 这个属性起到两个作用： +目标属性是否可以使用delete删除 +目标属性是否可以再次设置特性（descriptor）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859//**********************测试目标属性是否能被删除**********************-------var obj = {}//第一种情况：configurable设置为false，不能被删除。Object.defineProperty(obj,\"a\",{ value:\"1\", writable:false, enumerable:false, configurable:false});//删除属性delete obj.a;console.log( obj.a ); //依然是1，因为configurable:false//第二种情况：configurable设置为true，可以被删除。Object.defineProperty(obj,\"a\",{ value:\"1\", writable:false, enumerable:false, configurable:true});//删除属性delete obj.a;console.log( obj.a ); //返回undefined说明删除成功,因为configurable:true//**********************测试是否可以再次修改特性**********************-------var obj = {}//第一种情况：configurable设置为false，不能再次修改特性（descriptor）。Object.defineProperty(obj,\"a\",{ value:\"1\", writable:false, enumerable:false, configurable:false});//重新修改特性Object.defineProperty(obj,\"a\",{ value:\"1\", writable:true, //修改后 enumerable:true, //修改后 configurable:true});console.log( obj.a ); //报错：Uncaught TypeError: Cannot redefine property: a//第二种情况：configurable设置为true，可以再次修改特性。Object.defineProperty(obj,\"a\",{ value:\"1\", writable:false, enumerable:false, configurable:true});//重新修改特性Object.defineProperty(obj,\"a\",{ value:\"1\", writable:true, enumerable:true, configurable:true});console.log( obj.a ); //1 2、enumerable 当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中,默认为 false ; 1234567891011121314151617181920212223var obj = {}//第一种情况：enumerable设置为false，不能被枚举。Object.defineProperty(obj,\"a\",{ value:\"1\", writable:false, enumerable:false});//枚举对象的属性for( var attr in obj ){ console.log( attr ); }//第二种情况：enumerable设置为true，可以被枚举。Object.defineProperty(obj,\"a\",{ value:\"1\", writable:false, enumerable:true});//枚举对象的属性for( var attr in obj ){ console.log( attr ); //a} 3、writable 当且仅当该属性的 writable 键值为 true 时，属性的值，也就是上面的 value，才能被赋值运算符改变默认为false; 12345678910111213141516171819//属性的值是否可以被重写。设置为true可以被重写；设置为false，不能被重写。默认为false。var obj = {}//第一种情况：writable设置为false，不能重写。Object.defineProperty(obj,\"a\",{ value:\"1\", writable:false});//更改a的值obj.a = \"change value\";console.log( obj.a ); //1//第二种情况：writable设置为true，可以重写Object.defineProperty(obj,\"a\",{ value:\"1\", writable:true});//更改a的值obj.a = \"change value\"; 4、我们看看访问器属性 当使用存取器描述属性的特性的时候，允许设置以下特性属性,注意：当使用了getter或setter方法，不允许使用writable和value这两个属性 1234567var obj = {};Object.defineProperty(obj,\"a\",{&nbsp;configurable: true | false,&nbsp;enumerable: true | false, get:function (){} | undefined, set:function (value){} | undefined }); 看一个示例 1234567891011121314 var person = { a:1 } Object.defineProperty(person,'a',{ get(){ return 3 //当访问这个属性的时候返回3 }, set(val){ console.log(val)//当设置这个属性的时候执行,val是设置的值 }})person.a// 3,我们明明写的是a:1,怎么返回的3呢?这就是get()的威力了person.a = 5// 5,相应的设置的时候执行了set()函数 在来模拟一个访问和设置的默认行为 123456789101112131415161718var person = { a:1}# 注:里面的this指向ogj(person)Object.defineProperty(person,'a',{ get(){ return this.a }, set(val){ this.a = val }})//我们想当然的这么写.//person.a//Uncaught RangeError: Maximum call stack size exceeded//什么,溢出了?这是为什么?//哦~原来是这么写的话会造成循环引用,狂call不止//我们看下流程://person.a → get.call(person) → this.a → person.a → get.call(person) → this.a...... 需要修改如下： 1234567891011121314var person = { a:1}Object.defineProperty(person,'a',{ get(){ return this._a || 1 //定义一个新的属性和一个默认值 }, set(val){ this._a = val }})person.a// 1person.a=2// 2person.a// 2 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":"本富"},{"title":"升级hexo和nodejs导致hexo命名报错问题","slug":"hexo/hexo中node版本问题","date":"2022-07-23T03:17:00.000Z","updated":"2022-11-02T00:39:24.930Z","comments":true,"path":"2022/07/23/hexo/hexo-zhong-node-ban-ben-wen-ti/","link":"","permalink":"http://mr-zhangbf.github.io/2022/07/23/hexo/hexo-zhong-node-ban-ben-wen-ti/","excerpt":"","text":"迁移Hexo到Node.js 14 解决部署时报错 概述 升级nodejs之后执行原来的hexo d发布到git上结构报错 环境 Node.js 14.17.4, Hexo-cli 4.3.0, Hexo 5.4.0 报错内容 1The \"mode\" argument must be integer. Received an instance of Object 1WARN Deprecated config detected: \"external_link\" with a Boolean value is deprecated. See https://hexo.io/docs/configuration for more details. 解决 降低node版本到12.17.0（缺点不够优雅，有的项目需要另外的版本）使用nvm管理node不同版本 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":"本富"},{"title":"解决GitHub报错You‘re using an RSA key with SHA-1, which is no longer allowed.Please use a newer client","slug":"git/常见问题/配置相关/sshkey","date":"2022-07-23T01:01:34.000Z","updated":"2022-07-23T01:25:37.217Z","comments":true,"path":"2022/07/23/git/chang-jian-wen-ti/pei-zhi-xiang-guan/sshkey/","link":"","permalink":"http://mr-zhangbf.github.io/2022/07/23/git/chang-jian-wen-ti/pei-zhi-xiang-guan/sshkey/","excerpt":"","text":"解决GitHub报错You‘re using an RSA key with SHA-1, which is no longer allowed. Please use a newer client 在使用git pull的时候出现下面的错误提示You’re using an RSA key with SHA-1, which is no longer allowed. Please use a newer client 原因：GitHub 在 2022 年 3 月 15 日之后将不再支持 RSA 算法生成的密钥，原因是 RSA 不够安全，而笔者之前一直是使用如下命令生成密钥对的所以提示使用sha 解决生成新的Ed25519密钥对： 1ssh-keygen -t ed25519 -C \"your-email\" 命令会生成两个新的密钥对: 12id_ed25519id_ed25519.pub 然后去github =&gt; setting =&gt; SSH and GPG keys里面，将原来的不支持的对应机器的key删除掉，然后添加新生成的key（id_ed25519.pub）就行了。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"git","slug":"git","permalink":"http://mr-zhangbf.github.io/categories/git/"}],"tags":[{"name":"ssh_key","slug":"ssh-key","permalink":"http://mr-zhangbf.github.io/tags/ssh-key/"}],"author":"本富"},{"title":"eventloop个人理解","slug":"javascript/eventloop/eventloop","date":"2022-03-24T02:15:55.000Z","updated":"2022-03-24T02:58:39.859Z","comments":true,"path":"2022/03/24/javascript/eventloop/eventloop/","link":"","permalink":"http://mr-zhangbf.github.io/2022/03/24/javascript/eventloop/eventloop/","excerpt":"","text":"js事件循环机制在浏览器端（Event Loop）以及async/await的理解先看如下的一段代码 123456789101112131415161718192021console.log(1)async fun1(){&nbsp;console.log(2)&nbsp;await fun2()&nbsp;console.log(3) // 遇到await的时候会去执行外面的同步代码，当同步代码执行完毕在继续执行await后面的代码然后在执行本次循环的微任务代码}setTimeout(function(){&nbsp;console.log(5)},0)fun2(){&nbsp;console.log(4)}fun1()new Promise((resolve)=&gt;{&nbsp;console.log(6)&nbsp;resolve()}).then((res)=&gt;{&nbsp;console.log(7)})console.log(8)// 1 2 4 3 8 6 7 5 我们可以将js的任务分为同步任务和异步任务, 按照这种分类js的执行机制如下： 任务执行队列分为同步任务队列和异步任务队列 代码执行时，遇到同步代码，会被直接推入同步任务队列并依次执行 遇到异步代码(如setTimeout、setInterval), 会被直接推入异步任务队列 当同步任务队列执行完毕，这个时候异步任务队列的任务会被依次推入同步任务队列并依次执行 所以上面的代码执行的时候, setTimeout()不会被立即执行，会被推到异步任务队列里面, 之后再执行console.log(2), 同步任务队列任务执行完毕之后，会去异步任务队列的任务会被依次推到 同步任务队列并执行 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":"本富"},{"title":"vuex浅析","slug":"vue/vuex/vuex浅析","date":"2022-01-21T00:32:00.000Z","updated":"2022-01-22T04:47:58.920Z","comments":true,"path":"2022/01/21/vue/vuex/vuex-qian-xi/","link":"","permalink":"http://mr-zhangbf.github.io/2022/01/21/vue/vuex/vuex-qian-xi/","excerpt":"","text":"vuex 定义：可以理解为它是集中式存储所有组件状态的一个小仓库,并且保持我们存储状态以一种可以预测的方式发生变化。 一、想象一个场景1、如果你的项目里面有很多的页面和组件，并且存在多级嵌套关系，此时这些页面需要一个共享数据，此时就会产生两个问题: 多个嵌套和兄弟组件依赖同一个状态 在某个视图组件需要变更同一个状态 2、如果需要解决以上问题你可能会想到一下方案： 对于第一个问题，多组件嵌套，我们可以通过父子组件一层一层传递参数解决，虽然有些麻烦，但是能够解决问题，但是对于兄弟组件或者更负责的组件之间就很难办了，虽然可以通过各种办法去解决，或多或少会存在一定的问题，要么代码变得臃肿要么逻辑变的难以理解。 对于兄弟或者更负责的，可以通过父子组件直接引用，或者通过事件来变更、在这同步状态的多份拷贝 3、能不能把公共的抽离出来 针对这样的需求，可以把各个组件需要依赖的同一个状态抽离出来，在全局中使用单例模式进行管理 这种模式下，当一个组件需要更新状态的时候，任何组件都可以实时访问到这个组件的变化，也就是所有组件都能够更新最新的变化 4、这时候，Vuex诞生了！ 这就是 Vuex 背后的基本思想，借鉴了 Flux、Redux。与其他模式不同的是，Vuex 是专门为 Vue 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。 这是官网对vuex的一张图: 什么时候应该用vuex呢？ 这个问题因人而异，如果你不需要开发大型的单页应用，此时你完全没有必要使用vuex，比如你的页面就两三个，使用vuex后增加的文件比你现在的页面还要多，那就没这个必要了。 假如你的项目达到了中大型应用的规模，此时您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。 安装vuex进入项目，在命令行中输入命令 1cnpm i -S vuex 然后配置 vuex，使其工作起来：在src路径下创建store文件夹，然后创建index.js文件，文件内容如下： 123456789101112131415import Vue from 'vue'import Vuex from 'vuex'Vue.use(Vuex)const store = new Vuex.Store({ state: { name: 'zhangsan', age: 20, friends: [&nbsp;&nbsp;&nbsp;{name:'wanger', age:18},&nbsp;&nbsp;&nbsp;{name:'lisi', age:36},&nbsp;&nbsp;&nbsp;{name:'mazi', age:46}&nbsp;&nbsp;]&nbsp;},}) main.js文件做如下修改: 12345678910111213import Vue from 'vue'import App from './App'import Router from './router'import Store from './store'Vue.config.productionTip = false;new Vue({&nbsp;el: '#app',&nbsp;Router,&nbsp;Store,&nbsp;components: {App},&nbsp;template: '&lt;App /&gt;'}) 组件中使用vuex1、在App.vue中加入： 123456789101112131415&lt;template&gt;&nbsp;&lt;div&gt;&nbsp;&nbsp;&lt;div&gt;{{$store.state.name}}&lt;/div&gt; // ---&gt; zhangsan&nbsp;&nbsp;&lt;div&gt;{{getName()}}&lt;/div&gt; // ---&gt; zhangsan&nbsp;&lt;/div&gt;&nbsp;&lt;/template&gt;&lt;script&gt;export default {&nbsp;mounted(){&nbsp;&nbsp;// 在文件中直接可以通过this.$store.state.xxx来访问仓库中的状态&nbsp;&nbsp;console.log(this.$store.state.name)&nbsp;}}&lt;/script&gt; 官网建议我们在使用this.$store.state访问仓库的时候最好使用计算属性 12345678910export default {&nbsp;computed: {&nbsp;&nbsp;getName(){&nbsp;&nbsp;&nbsp;return this.$store.state.name&nbsp;&nbsp;}&nbsp;},&nbsp;mounted(){&nbsp;&nbsp;this.getName()&nbsp;} } 是不是每次都写this.$store.state.name让你感到厌烦，你实在不想写这个东西怎么办? 1234567891011&lt;script&gt;import { mapState } from 'vuex'; // 从vuex中导入mapStateexport default { mounted() { console.log(this.name); }, computed: { ...mapState(['name'], {aliasAge: 'age'}), // 经过解构后，自动就添加到了计算属性中，此时就可以直接像访问计算属性一样访问它,通过aliasAge还可以取别名 },}&lt;/script&gt; 了解修饰器：getter的作用 有个需求是这样的，假设你项目有5个页面，其中2个页面使用name，另外3个页面需要在name前面加上hello,怎么操作？ 针对那3个页面去修改并在name前加上hello吗？，这样会造成代码冗余，很不好； 假如下次产品经理让你把 “hello” 改成 “fuck” 的时候，你又得把三个页面都改一遍，想死的心都有啦 正对这种问题我们有没有解决方案呢？答案是有的，我们可以直接在store中对name进行一些操作或者加工，从源头解决问题！那么具体应该怎么写呢？getters就用上啦 123456789101112131415161718192021222324import Vue from 'vue';import Vuex from 'vuex';Vue.use(Vuex);const store = new Vuex.Store({ state: { name: 'zhangsan', age: 20, friends: [ {name:'wanger', age:18}, {name:'lisi', age:36}, {name:'mazi', age:46} ] }, // 在store对象中增加getters属性 getters: { getMessage(state) { // 获取修饰后的name，第一个参数state为必要参数，必须写在形参上 return `hello${state.name}`; } },});export default store; 在组件中使用： 1234567export default {&nbsp;mounted() {&nbsp;&nbsp;// 注意不是$store.state了，而是$store.getters&nbsp;&nbsp;console.log(this.$store.state.name);&nbsp;&nbsp;console.log(this.$store.getters.getMessage);&nbsp;}} 和mapState一样，是不是每次都通过this.$store.state.xxx一样麻烦，这个时候我们同样可以使用 1234567891011121314&lt;script&gt;import {mapState, mapGetters} from 'vuex'export default {&nbsp;mounted(){ console.log(this.name) console.log(this.getAge)&nbsp;},&nbsp;computed: { ...mapState(['name']), ...mapGetters(['getAge']) ...mapGetters({aliasName: 'getPersionAge'})&nbsp;}}&lt;/script&gt; 了解如何修改值：Mutation🤗 OK！首先恭喜你看到了这里，至此，我们已经成功访问到了store里面的值，接下来我来介绍一下怎么修改state里面的值。 说到修改值，有的同学就会想到这样写： 12// 错误示范this.$store.state.XXX = XXX; 🤪 首先，这里我先明确的说明：这是错误的写法！这是错误的写法！这是错误的写法！ 为什么上面是错误的写法？因为这个store仓库比较奇怪，你可以随便拿，但是你不能随便改，我举个例子： 🤔 假如你打开微信朋友圈，看到你的好友发了动态，但是动态里有个错别字，你要怎么办呢？你可以帮他改掉吗？当然不可以！我们只能通知他本人去修改，因为是别人的朋友圈，你是无权操作的，只有他自己才能操作，同理，在vuex中，我们不能直接修改仓库里的值，必须用vuex自带的方法去修改，这个时候，Mutation闪亮登场了！ 😬 把问题解释清楚之后，我们准备完成一个效果：我们先输出state中的number的默认值0，然后我们在vue组件里通过提交Mutations改变number的默认值0，改成我们想修改的值，然后再输出出来，这样就可以简单练习怎么使用Mutations了。不说废话，上代码。修改store/index.js 123456789101112131415161718import Vue from 'vue';import Vuex from 'vuex';Vue.use(Vuex);const store = new Vuex.Store({ state: { name: '张三', number: 0, }, mutations: { // 增加nutations属性 setNumber(state) { // 增加一个mutations的方法，方法的作用是让num从0变成5，state是必须默认参数 state.number = 5; } },});export default store; 修改App.vue 123456789&lt;script&gt;export default { mounted() { console.log(`旧值：${this.$store.state.number}`); this.$store.commit('setNumber'); console.log(`新值：${this.$store.state.number}`); },}&lt;/script&gt; 运行项目，查看控制台：🤡 以上是简单实现mutations的方法，是没有传参的，如果我们想传不固定的参数怎么办？接下来教你解决修改store/index.js 123456789101112131415161718192021import Vue from 'vue';import Vuex from 'vuex';Vue.use(Vuex);const store = new Vuex.Store({ state: { name: '张三', number: 0, }, mutations: { setNumber(state) { state.number = 5; }, setNumberIsWhat(state, number) { // 增加一个带参数的mutations方法 state.number = number; }, },});export default store; 修改App.vue 123456789&lt;script&gt;export default { mounted() { console.log(`旧值：${this.$store.state.number}`); this.$store.commit('setNumberIsWhat', 666); console.log(`新值：${this.$store.state.number}`); },}&lt;/script&gt; 运行项目，查看控制台：没有问题！ 注意：上面的这种传参的方式虽然可以达到目的，但是并不推荐，官方建议传递一个对象进去，这样看起来更美观，对象的名字你可以随意命名，但我们一般命名为payload，代码如下： 修改store/index.js 12345678mutations: { setNumber(state) { state.number = 5; }, setNumberIsWhat(state, payload) { // 增加一个带参数的mutations方法，并且官方建议payload为一个对象 state.number = payload.number; },}, 修改App.vue 123456789&lt;script&gt;export default { mounted() { console.log(`旧值：${this.$store.state.number}`); this.$store.commit('setNumberIsWhat', { number: 666 }); // 调用的时候也需要传递一个对象 console.log(`新值：${this.$store.state.number}`); },}&lt;/script&gt; 此时可以得到和之前一样的效果，并且代码更加美观！😱 这里说一条重要原则：Mutations里面的函数必须是同步操作，不能包含异步操作！（别急，后面会讲到异步） 😱 这里说一条重要原则：Mutations里面的函数必须是同步操作，不能包含异步操作！（别急，后面会讲到异步） 😱 这里说一条重要原则：Mutations里面的函数必须是同步操作，不能包含异步操作！（别急，后面会讲到异步） 好的，记住这个重要原则，我们再说一个小技巧： 🤖 官方建议：就像最开始的mapState和mapGetters一样，我们在组件中可以使用mapMutations以代替this.$store.commit(‘XXX’)，是不是很方便呢？ 1234567891011&lt;script&gt;import { mapMutations } from 'vuex';export default { mounted() { this.setNumberIsWhat({ number: 999 }); }, methods: { // 注意，mapMutations是解构到methods里面的，而不是计算属性了 ...mapMutations(['setNumberIsWhat']), },}&lt;/script&gt; 此时可以得到和之前一样的效果，并且代码又美观了一点！ 当然你也可以给它叫别名，取外号，就像这样： 123methods:{ ...mapMutations({ setNumberIsAlias: 'setNumberIsWhat' }), // 赋别名的话，这里接收对象，而不是数组} 🤔 OK，关于Mutation的介绍大致就是这样，另外你也掌握了在定义mutations方法的时候有无参数应该怎么写；并且听取了官方建议，使用mapMutations解构到你的组件内部的methods里，这样你就可以很简单的使用mutations方法啦！ 🤪 上面提到，Mutations只能进行同步操作，所以，我们马上开始下一节，看看使用Actions进行异步操作的时候应该注意什么！ 了解异步操作：Actions😆 OK！本节我们来学习使用Actions，Actions存在的意义是假设你在修改state的时候有异步操作，vuex作者不希望你将异步操作放在Mutations中，所以就给你设置了一个区域，让你放异步操作，这就是Actions 😛 我们直接上一个代码 修改store/index.js 123456789101112131415161718192021const store = new Vuex.Store({ state: { name: '张三', number: 0, }, mutations: { setNumberIsWhat(state, payload) { state.number = payload.number; }, }, actions: { // 增加actions属性 setNum(content) { // 增加setNum方法，默认第一个参数是content，其值是复制的一份store return new Promise(resolve =&gt; { // 我们模拟一个异步操作，1秒后修改number为888 setTimeout(() =&gt; { content.commit('setNumberIsWhat', { number: 888 }); resolve(); }, 1000); }); } }}); 修改App.vue 12345async mounted() { console.log(`旧值：${this.$store.state.number}`); await this.$store.dispatch('setNum'); console.log(`新值：${this.$store.state.number}`);}, 运行项目，查看控制台：🤓 看了例子，是不是明白了，action就是去提交mutation的，什么异步操作都在action中消化了，最后再去提交mutation的。 😼 当然，你可以模仿mutation进行传参，就像下面这样： 修改store/index.js 12345678910actions: { setNum(content, payload) { // 增加payload参数 return new Promise(resolve =&gt; { setTimeout(() =&gt; { content.commit('setNumberIsWhat', { number: payload.number }); resolve(); }, 1000); }); },} 修改App.vue 12345async mounted() { console.log(`旧值：${this.$store.state.number}`); await this.$store.dispatch('setNum', { number: 611 }); console.log(`新值：${this.$store.state.number}`);}, 运行项目，查看控制台没有任何问题！ 🤖 官方建议1：你如果不想一直使用this.$store.dispatch(‘XXX’)这样的写法调用action，你可以采用mapActions的方式，把相关的actions解构到methods中，用this直接调用： 1234567891011&lt;script&gt;import { mapActions } from 'vuex';export default { methods: { ...mapActions(['setNum']), // 就像这样，解构到methods中 }, async mounted() { await this.setNum({ number: 123 }); // 直接这样调用即可 },}&lt;/script&gt; 当然，你也可以取别名，取外号，就像下面这样： 1...mapActions({ setNumAlias: 'setNum' }), // 赋别名的话，这里接收对象，而不是数组 🤖 官方建议2：在store/index.js中的actions里面，方法的形参可以直接将commit解构出来，这样可以方便后续操作： 12345678910actions: { setNum({ commit }) { // 直接将content结构掉，解构出commit，下面就可以直接调用了 return new Promise(resolve =&gt; { setTimeout(() =&gt; { commit('XXXX'); // 直接调用 resolve(); }, 1000); }); },}, 🤠 OK，看到这里，你应该明白action在vuex的位置了吧，什么时候该用action，什么时候不用它，你肯定有了自己的判断，最主要的判断条件就是我要做的操作是不是异步，这也是action存在的本质。当然，你不要将action和mutation混为一谈，action其实就是mutation的上一级，在action这里处理完异步的一些操作后，后面的修改state就交给mutation去做了。 总结🤗 好！大致对vuex的讲解就到这里了，看到这里你肯定对vuex不陌生了，你会安装它，配置它，读取state的值，甚至修饰读(Getter)，然后你会修改里面的值了(Mutation)，假如你有异步操作并且需要修改state，那你就要使用Action，这样，你就可以在你的项目中用起来vuex啦！加油吧！🤔 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":"本富"},{"title":"vue-数据通信使用记录","slug":"vue/数据通信/使用记录","date":"2022-01-19T02:49:36.000Z","updated":"2022-01-20T02:41:45.377Z","comments":true,"path":"2022/01/19/vue/shu-ju-tong-xin/shi-yong-ji-lu/","link":"","permalink":"http://mr-zhangbf.github.io/2022/01/19/vue/shu-ju-tong-xin/shi-yong-ji-lu/","excerpt":"","text":"数据通信的使用eventBus EventBus 又称为事件总线。在Vue中可以使用 EventBus 来作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的“灾难”，因此才需要更完善的Vuex作为状态管理中心，将通知的概念上升到共享状态层次。 使用event-bus注意事项1、前面提到过，如果使用不善，EventBus会是一种灾难，大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的EventBus会被移除，这样就导致业务走不下去。还要就是如果业务有反复操作的页面，EventBus在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理EventBus在项目中的关系。通常会用到，在vue页面销毁时，同时移除EventBus事件监听。2、等子组件$on去注册事件后就执行了父组件$emit 所以接收不到信息，配合嵌套组件的生命周期3、当点击销毁子组件的时候 子组件还能接收到数据吗？对应的回调函数还能在执行吗？ 答案是 会，事件订阅功能是$eventBus对象完成的，与组件无关，当你点击销毁后 再点击创建又会多了一个订阅事件，依次类推每次点击新建后都会多一个订阅事件4、 在子组件销毁后进行取消订阅事件 1234destroyed () {&nbsp;// 取消对bus事件的监听&nbsp;this.$bus.$off('bus')} 全局使用方法1、定义一个eventBus 123456import Bus from 'vue';export default {&nbsp;install(Vue){&nbsp;&nbsp;Vue.prototype.Bus = new Bus()&nbsp;}} 2、在main.js中引入eventBus 12import vueBus from '@/utils/vueBus.js'Vue.use(vueBus) 3、新建一个路由组件同时在建2个组件 123456789101112131415161718&lt;template&gt; &lt;div&gt; &lt;Component-A&gt;&lt;/Component-A&gt; &lt;Component-B&gt;&lt;/Component-B&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Component-A from './components/Component-A';import Component-B from './components/Component-B';export default { name:'vueBus', data(){ return { } }}&lt;/script&gt; 4、Component-A组件发送事件 123456789101112131415&lt;template&gt;&nbsp;&lt;div class=\"g1-component_warp\"&gt;&nbsp;&nbsp;&lt;a-button @click=\"sendData\"&gt;发送数据&lt;/a-button&gt;&nbsp;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;&nbsp;export default {&nbsp;&nbsp;methods:{&nbsp;&nbsp;&nbsp;sendData(){&nbsp;&nbsp;&nbsp;&nbsp;this.Bus.$emit('aa', '组件1发送的数据')&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;}&nbsp;}&lt;/script&gt; 5、Component-B组件接收事件 123456789101112131415161718&lt;template&gt;&nbsp;&lt;div class=\"g1-component_warp\"&gt;&nbsp;&nbsp;&lt;div&gt;组件2监听组件1 emit的数据: &lt;font color=\"red\"&gt;{{msg}}&lt;/font&gt;&lt;/div&gt;&nbsp;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;&nbsp;export default {&nbsp;&nbsp;data(){&nbsp;&nbsp;&nbsp;return {&nbsp;&nbsp;&nbsp;&nbsp;msg: ''&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;},&nbsp;&nbsp;mounted(){&nbsp;&nbsp;&nbsp;this.Bus.$on('aa', arg=&gt; this.msg = arg)&nbsp;&nbsp;}&nbsp;}&lt;/script&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":"本富"},{"title":"vue-mixins记录","slug":"vue/vue-mixins/vue-mixins混入的使用记录","date":"2022-01-18T05:54:42.000Z","updated":"2022-01-19T06:58:21.522Z","comments":true,"path":"2022/01/18/vue/vue-mixins/vue-mixins-hun-ru-de-shi-yong-ji-lu/","link":"","permalink":"http://mr-zhangbf.github.io/2022/01/18/vue/vue-mixins/vue-mixins-hun-ru-de-shi-yong-ji-lu/","excerpt":"","text":"vue-mixins记录 mixins（混入）就是定义了一部分公共的方法、计算属性或者钩子函数等 vue 组件中的可复用功能，然后混合进各个组件中使用。下面我们具体来看看怎么使用。 1、在项目中定义mixins 12345678910111213141516171819202122const TestMixins = {&nbsp;data() {&nbsp;&nbsp;return {&nbsp;&nbsp;&nbsp;msg1: '我是 mixins 中的字符串 msg1',&nbsp;&nbsp;&nbsp;msg2: '我是 mixins 中的字符串 msg2'&nbsp;&nbsp;}&nbsp;},&nbsp;created() {&nbsp;&nbsp;console.log('我是 mixins 中的钩子函数 created')&nbsp;&nbsp;this.hello()&nbsp;&nbsp;this.say()&nbsp;&nbsp;this.pay()&nbsp;},&nbsp;methods: {&nbsp;&nbsp;hello() {&nbsp;&nbsp;&nbsp;console.log('我是 mixins 中的函数 hello')&nbsp;&nbsp;},&nbsp;&nbsp;say() {&nbsp;&nbsp;&nbsp;console.log('我是 mixins 中的函数 say')&nbsp;&nbsp;}&nbsp;}} 2、在使用的组件中导入: 123456789101112131415161718192021222324import TestMixins from '@/mixins/TestMixins'；export default {&nbsp;mixins: [TestMixins],&nbsp;data() {&nbsp;&nbsp;return {&nbsp;&nbsp;&nbsp;msg1: '我是组件中的字符串 msg1',&nbsp;&nbsp;&nbsp;sex: '我是组件中的字符串 sex'&nbsp;&nbsp;}&nbsp;},&nbsp;created() {&nbsp;&nbsp;console.log('我是组件中的钩子函数 created')&nbsp;&nbsp;this.hello()&nbsp;&nbsp;this.say()&nbsp;&nbsp;this.pay()&nbsp;},&nbsp;methods: {&nbsp;&nbsp;hello() {&nbsp;&nbsp;&nbsp;console.log('我是组件中的函数 hello')&nbsp;&nbsp;},&nbsp;&nbsp;pay() {&nbsp;&nbsp;&nbsp;console.log('我是组件中的函数 pay')&nbsp;&nbsp;}&nbsp;}} 总结 混入对象的钩子将在组件自身钩子之前调用。 值为对象的选项，例如 data、methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。 混入对象中可以使用和调用组件自身变量和函数，且与在组件自身中使用情况一样。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"技术","slug":"技术","permalink":"http://mr-zhangbf.github.io/categories/技术/"}],"tags":[{"name":"vue-mixins","slug":"vue-mixins","permalink":"http://mr-zhangbf.github.io/tags/vue-mixins/"}],"author":"mr.zhangbf"},{"title":"vue路由守卫","slug":"vue/vue-router/vue路由","date":"2022-01-04T05:54:42.000Z","updated":"2022-01-20T09:42:31.584Z","comments":true,"path":"2022/01/04/vue/vue-router/vue-lu-you/","link":"","permalink":"http://mr-zhangbf.github.io/2022/01/04/vue/vue-router/vue-lu-you/","excerpt":"","text":"vue-router中beforeEach 导航守卫又称路由守卫，实时监控路由跳转时的过程，在路由跳转的各个过程执行相应的操作，类似于生命周期函数，在开发过程中经常被使用，比如用户点击一个页面，如果未登录就调到登录页面，已登录就让用户正常进入。 分类 全局路由一共分为三类：全局守卫，路由独享的守卫，组件内的守卫。 一、全局守卫 全局守卫有三种： router.beforeEach（全局前置守卫） router.beforeResolve（全局解析守卫） router.afterEach（全局后置守卫） 1、 router.beforeEach（全局前置守卫） 以一个简单的例子来解释router.beforeEach假设我们现在做一个这样的需求，用户在未登录的时候进入任意页面，我们就让用户跳转到登录页面，在已登录的时候让用户正常跳转到点击的页面。准备好三个组件：home.vue,login.vue,about.vue 1234567891011121314151617181920212223242526272829303132333435363738home.vue的内容：&lt;template&gt; &lt;div class=\"hello\"&gt; &lt;button @click=\"$router.push('/about')\"&gt;去关于页面&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default { name: 'home', data() { return {} } }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;login.vue的内容：&lt;template&gt; &lt;div&gt;登录页面&lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default { name: \"about\" }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;about.vue的内容：&lt;template&gt; &lt;div&gt;关于页面&lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default { name: \"about\" }&lt;/script&gt; 2、router配置文件内容： 12345678910111213141516171819202122232425262728293031323334353637383940414243import Vue from 'vue'import Router from 'vue-router'import home from '@/components/home'import login from '@/components/login'import about from '@/components/about' Vue.use(Router)const ISLOGIN = true //登录状态模拟const router = new Router({ routes: [ { path: '/', name: 'home', component: home, }, { path: '/login', name: 'login', component: login }, { path: '/about', name: 'about', component: about } ]}) router.beforeEach((to, from, next) =&gt; { //全局全局前置守卫 //to : 将要进入的目标路由对象 //from : 即将离开的目标路由对象 //执行跳转的下一步钩子 console.log(to) console.log(from) if(to.name != 'login'){ //如果不是登录页面 if(ISLOGIN)next() //已登录就执行跳转 else next({name:'login'}) //否则跳转到登录页面 }else{ //如果是登录页面 if(ISLOGIN)next({name:'/'}) //已登录就跳转到首页 else next() //否则正常进入登录页面 }})export default router 我们可以看到，每次路由跳转，router.beforeEach都会执行，并且接受三个参数 to记录着将要进入的目标路由对象的信息 from记录着即将离开的目标路由对象的信息 next()表示执行下一步 router.beforeEach就是全局路由跳转时触发执行的函数 3、router.beforeResolve(全局解析守卫)和全局前置守卫类似，区别是在跳转被确认之前，同时在所有组件内守卫和异步路由组件都被解析之后，解析守卫才调用。 4、router.afterEach(全局后置钩子)只接受to和from,不会接受 next 函数也不会改变导航本身 二、路由独享守卫 独享守卫只有一种:beforeEnter。该守卫接收的参数与全局守卫是一样的，但是该守卫只在其他路由跳转至配置有beforeEnter路由表信息时才生效。 router配置文件内容： 123456789{ path: '/about', name: 'about', component: about, beforeEnter:(to,from,next)=&gt;{ console.log(to); console.log(from); next() } 三、组件内守卫 组件内守卫一共有三个： beforeRouteEnter， beforeRouteUpdate， beforeRouteLeave三者分别对应：进入该路由时执行，该路由中参数改变时执行，离开该路由时执行。 1234567891011121314151617&lt;template&gt; &lt;div&gt;关于页面&lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default { name: \"about\", beforeRouteEnter(to, from, next) { //进入该路由时执行 }, beforeRouteUpdate(to, from, next) { //该路由参数更新时执行 }, beforeRouteLeave(to, from, next) { //离开该路由时执行 } }&lt;/script&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"vue","slug":"vue","permalink":"http://mr-zhangbf.github.io/categories/vue/"}],"tags":[{"name":"vue-router","slug":"vue-router","permalink":"http://mr-zhangbf.github.io/tags/vue-router/"}],"author":"本富"},{"title":"react生命周期前后对比","slug":"react/生命周期/生命周期","date":"2021-07-20T09:20:00.000Z","updated":"2021-07-20T09:40:47.856Z","comments":true,"path":"2021/07/20/react/sheng-ming-zhou-qi/sheng-ming-zhou-qi/","link":"","permalink":"http://mr-zhangbf.github.io/2021/07/20/react/sheng-ming-zhou-qi/sheng-ming-zhou-qi/","excerpt":"","text":"React16之前的生命周期 第一阶段，初始化阶段，由ReactDOM.render()触发，初次渲染 1234constructor(){} =====&gt; 构造器componentWillMount(){} =======&gt; 组件挂载之前render(){} ======&gt; 挂载结构componentDidMount(){} =======&gt; 组件挂载后，常用钩子，一般用来做一些初始化的事情：开启定时器，发送网络请求，订阅消息 更新阶段,this.setSet()或父组件的render触发 123456789shouldComponentUpdate() { =======&gt; 组件是否被更新&nbsp;return false;}componentWillUpdate(){} =======&gt; 组件更新前render(){} ======&gt; 挂载结构componentDidUpdate(){} =======&gt; 组件更新后``` - 第三阶段，卸载阶段，由ReactDOM.unmountComponentAtNode()触发 componentWillUnmount(){} =======&gt; 组件卸载之前，常用钩子，一般用来做一些收尾事情：关闭定时器，取消订阅消息 12综合展示： 1.setState() // 修改数据时触发更新 2.forceUpdate() // 强制更新，不经过shouldComponentUpdate(){} 3.componentWillReceiveProps(){} // 父组件更新引发更新 constructor(){} =====&gt; 构造器 componentWillMount(){} =======&gt; 组件挂载之前 render(){} ======&gt; 挂载结构 componentDidMount(){} =======&gt; 组件挂载后 componentWillUnmount(){} =======&gt; 组件卸载之前 shouldComponentUpdate() { return false } =======&gt; 组件是否被更新 componentWillUpdate(){} =======&gt; 组件更新前 componentDidUpdate(){} =======&gt; 组件更新后 123# React16以后的生命周期- 初始化阶段，只执行一次 constructor(){} //构造器getDerivedStateFromProps() {} //从Props获取派生render(){} //挂载结构componentDidMount(){} //组件挂载后 1- 第二阶段：更新阶段，由内部this.setState()或父组件render()触发 getDerivedStateFromProps() {} =====&gt; 从Props获取派生shouldComponentUpdate() { return false } =======&gt; 组件是否被更新render(){} ======&gt; 挂载结构getSnapshotBeforeUpdate(prevProps, prevState) {} ======&gt; // 获取快照更新前componentDidUpdate(){} =======&gt; 组件更新后 - 第三阶段：卸载阶段，由ReactDOM.unmountComponentAtNode()触发 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"react","slug":"react","permalink":"http://mr-zhangbf.github.io/categories/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://mr-zhangbf.github.io/tags/react/"}],"author":"本富"},{"title":"bat添加软件右键打开项目","slug":"soft/bat/bat添加软件右键打开项目","date":"2021-06-23T03:18:54.000Z","updated":"2021-06-23T03:40:38.045Z","comments":true,"path":"2021/06/23/soft/bat/bat-tian-jia-ruan-jian-you-jian-da-kai-xiang-mu/","link":"","permalink":"http://mr-zhangbf.github.io/2021/06/23/soft/bat/bat-tian-jia-ruan-jian-you-jian-da-kai-xiang-mu/","excerpt":"","text":"@echo Off:STARTCLSecho =========================================================================echo * 注意: 该bat文件必须和HBuilderX.exe在同级目录 *echo * [A]添加右键菜单 *echo * [D]删除右键菜单 *echo * [Q]退出 *echo * *echo =========================================================================Set /P Choice= 请选择要进行的操作 (A/D/Q) ，然后按回车：If /I “%Choice%”==”A” Goto :ADDIf /I “%Choice%”==”D” Goto :DELIf /I “%Choice%”==”Q” Exit START :ADDCLSset str=%cd%echo Windows Registry Editor Version 5.00&gt; tmp.regecho [HKEY_CLASSES_ROOT*\\shell]&gt;&gt; tmp.regecho [HKEY_CLASSES_ROOT*\\shell\\HBuilderX]&gt;&gt; tmp.regecho @=”用Sublime Text打开”&gt;&gt; tmp.regecho “Icon”=”\"%str:=\\%\\HBuilderX.exe\",0”&gt;&gt; tmp.regecho [HKEY_CLASSES_ROOT*\\shell\\HBuilderX\\Command]&gt;&gt; tmp.regecho @=”\"%str:=\\%\\HBuilderX.exe\" \"%%1^\"“&gt;&gt; tmp.reg echo [HKEY_CLASSES_ROOT\\Directory\\shell\\sublime]&gt;&gt; tmp.regecho @=”添加到Sublime Text工程项目”&gt;&gt; tmp.regecho “Icon”=”\"%str:=\\%\\HBuilderX.exe\",0”&gt;&gt; tmp.regecho [HKEY_CLASSES_ROOT\\Directory\\shell\\sublime\\Command]&gt;&gt; tmp.regecho @=”\"%str:=\\%\\HBuilderX.exe\" \"%%1^\"“&gt;&gt; tmp.reg echo [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\sublime]&gt;&gt; tmp.regecho @=”添加到Sublime Text工程项目”&gt;&gt; tmp.regecho “Icon”=”\"%str:=\\%\\HBuilderX.exe\",0”&gt;&gt; tmp.regecho [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\sublime\\Command]&gt;&gt; tmp.regecho @=”\"%str:=\\%\\HBuilderX.exe\" \"%%V^\"“&gt;&gt; tmp.regecho =========================================================================echo * *echo * 正在将生成的注册信息写入注册表，请点击“是”键钮！ *echo * *echo =========================================================================tmp.regdel tmp.regGOTO :START :DELecho Windows Registry Editor Version 5.00&gt; tmp.regecho [-HKEY_CLASSES_ROOT*\\shell\\HBuilderX]&gt;&gt; tmp.regecho [-HKEY_CLASSES_ROOT\\Directory\\shell\\HBuilderX]&gt;&gt; tmp.regecho [-HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\HBuilderX]&gt;&gt; tmp.regtmp.regdel tmp.regGOTO :START document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[],"author":"本富"},{"title":"url-loader+html-loader处理图片不能正常打开","slug":"webpack/常见问题/url-loader+html-loader处理图片不能正常打开","date":"2021-06-06T00:57:30.000Z","updated":"2021-06-07T03:29:38.067Z","comments":true,"path":"2021/06/06/webpack/chang-jian-wen-ti/url-loader-html-loader-chu-li-tu-pian-bu-neng-zheng-chang-da-kai/","link":"","permalink":"http://mr-zhangbf.github.io/2021/06/06/webpack/chang-jian-wen-ti/url-loader-html-loader-chu-li-tu-pian-bu-neng-zheng-chang-da-kai/","excerpt":"","text":"url-loader+html-loader处理图片不能正常打开在配置url-loader和html-loader的时候都需要配置esModule: false闭url-loader的es6模块化，使用commonjs解析 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"问题锦集","slug":"问题锦集","permalink":"http://mr-zhangbf.github.io/categories/问题锦集/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://mr-zhangbf.github.io/tags/webpack/"}],"author":"本富"},{"title":"webpack5+webpack-dev-server兼容","slug":"webpack/常见问题/webpack5+webpack-dev-server兼容","date":"2021-06-06T00:57:30.000Z","updated":"2022-01-19T00:58:46.561Z","comments":true,"path":"2021/06/06/webpack/chang-jian-wen-ti/webpack5-webpack-dev-server-jian-rong/","link":"","permalink":"http://mr-zhangbf.github.io/2021/06/06/webpack/chang-jian-wen-ti/webpack5-webpack-dev-server-jian-rong/","excerpt":"","text":"安装webpack-dev-server 报错Error:Cannot find module ‘webpack-cli/bin/config-yargs’ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"问题锦集","slug":"问题锦集","permalink":"http://mr-zhangbf.github.io/categories/问题锦集/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://mr-zhangbf.github.io/tags/webpack/"}],"author":"本富"},{"title":"node项目使用import报错问题","slug":"node/node使用import报错问题","date":"2021-05-06T01:38:30.000Z","updated":"2021-06-07T03:29:38.065Z","comments":true,"path":"2021/05/06/node/node-shi-yong-import-bao-cuo-wen-ti/","link":"","permalink":"http://mr-zhangbf.github.io/2021/05/06/node/node-shi-yong-import-bao-cuo-wen-ti/","excerpt":"","text":"在express框架中运用import export 在新搭建的基于node.js的express框架时，不能直接运用import/export，否则会报错如下 所以需要在入口文件里面导入babel依赖1* yarn add babel-register babel-preset-env –save-dev2* 在./bin/www文件的第一行添加如下代码 require('babel-register')({ presets: ['env'] });3* npm start启动项目，已可以正常运行了 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"技术","slug":"技术","permalink":"http://mr-zhangbf.github.io/categories/技术/"}],"tags":[{"name":"vuex","slug":"vuex","permalink":"http://mr-zhangbf.github.io/tags/vuex/"}],"author":"本富"},{"title":"ant-design时设置DatePicker日期控件中文显示","slug":"javascript/moment/ant-design时设置DatePicker日期控件中文显示","date":"2021-04-30T05:54:42.000Z","updated":"2021-04-30T06:21:42.697Z","comments":true,"path":"2021/04/30/javascript/moment/ant-design-shi-she-zhi-datepicker-ri-qi-kong-jian-zhong-wen-xian-shi/","link":"","permalink":"http://mr-zhangbf.github.io/2021/04/30/javascript/moment/ant-design-shi-she-zhi-datepicker-ri-qi-kong-jian-zhong-wen-xian-shi/","excerpt":"","text":"方式一：在组件中单独设置 import locale from 'antd/lib/date-picker/locale/zh_CN'; &lt;DatePicker locale={locale} /&gt;; 方法二：全局设置 注意：DatePicker、MonthPicker、RangePicker、WeekPicker 部分 locale 是从 value 中读取，所以请先正确设置 moment 的 locale 123456// 默认语言为 en-US，如果你需要设置其他语言，推荐在入口文件全局设置 localeimport moment from 'moment';import 'moment/locale/zh-cn';moment.locale('zh-cn'); &lt;DatePicker defaultValue={moment('2015-01-01', 'YYYY-MM-DD')} /&gt;; 遇到的问题以前使用这种方法没有问题，但是最近这样配置的时候出现月和周不能显示中文 现在的方法 新建一个globals.js文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119import moment from 'moment';import 'moment/locale/zh-cn'; export default {&nbsp; install(Vue, options) {&nbsp;&nbsp; Vue.prototype.momentUpdate = function(moment){&nbsp;&nbsp;&nbsp; moment.locale('zh-cn', {&nbsp;&nbsp;&nbsp;&nbsp; months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),&nbsp;&nbsp;&nbsp;&nbsp; monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),&nbsp;&nbsp;&nbsp;&nbsp; weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),&nbsp;&nbsp;&nbsp;&nbsp; weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),&nbsp;&nbsp;&nbsp;&nbsp; weekdaysMin: '日_一_二_三_四_五_六'.split('_'),&nbsp;&nbsp;&nbsp;&nbsp; longDateFormat: {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LT: 'Ah点mm分',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LTS: 'Ah点m分s秒',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L: 'YYYY-MM-DD',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LL: 'YYYY年MMMD日',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LLL: 'YYYY年MMMD日Ah点mm分',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LLLL: 'YYYY年MMMD日ddddAh点mm分',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l: 'YYYY-MM-DD',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ll: 'YYYY年MMMD日',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lll: 'YYYY年MMMD日Ah点mm分',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; llll: 'YYYY年MMMD日ddddAh点mm分'&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp; meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,&nbsp;&nbsp;&nbsp;&nbsp; meridiemHour: function (h, meridiem) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let hour = h;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (hour === 12) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hour = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (meridiem === '凌晨' || meridiem === '早上' ||&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; meridiem === '上午') {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return hour;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (meridiem === '下午' || meridiem === '晚上') {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return hour + 12;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // '中午'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return hour &gt;= 11 ? hour : hour + 12;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp; meridiem: function (hour, minute, isLower) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const hm = hour * 100 + minute;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (hm &lt; 600) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return '凌晨';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (hm &lt; 900) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return '早上';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (hm &lt; 1130) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return '上午';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (hm &lt; 1230) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return '中午';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (hm &lt; 1800) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return '下午';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return '晚上';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp; calendar: {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sameDay: function () {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nextDay: function () {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastDay: function () {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nextWeek: function () {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let startOfWeek, prefix;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; startOfWeek = moment().startOf('week');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prefix = this.diff(startOfWeek, 'days') &gt;= 7 ? '[下]' : '[本]';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastWeek: function () {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let startOfWeek, prefix;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; startOfWeek = moment().startOf('week');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prefix = this.unix() &lt; startOfWeek.unix() ? '[上]' : '[本]';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sameElse: 'LL'&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp; ordinalParse: /\\d{1,2}(日|月|周)/,&nbsp;&nbsp;&nbsp;&nbsp; ordinal: function (number, period) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (period) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'd':&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'D':&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'DDD':&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return number + '日';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'M':&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return number + '月';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'w':&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'W':&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return number + '周';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return number;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp; relativeTime: {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; future: '%s内',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; past: '%s前',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s: '几秒',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m: '1 分钟',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mm: '%d 分钟',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; h: '1 小时',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hh: '%d 小时',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d: '1 天',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dd: '%d 天',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M: '1 个月',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MM: '%d 个月',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y: '1 年',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yy: '%d 年'&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp;&nbsp;&nbsp; week: {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dow: 1, // Monday is the first day of the week.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doy: 4 // The week that contains Jan 4th is the first week of the year.&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp; });&nbsp;&nbsp; }(moment);&nbsp; }} main.js全局引入 1234//main.js中引入import globals from '@/utils/globals'Vue.use(globals); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"个人","slug":"个人","permalink":"http://mr-zhangbf.github.io/categories/个人/"}],"tags":[{"name":"moment js vue","slug":"moment-js-vue","permalink":"http://mr-zhangbf.github.io/tags/moment-js-vue/"}],"author":"本富"}],"categories":[{"name":"git","slug":"git","permalink":"http://mr-zhangbf.github.io/categories/git/"},{"name":"技术","slug":"技术","permalink":"http://mr-zhangbf.github.io/categories/技术/"},{"name":"vue","slug":"vue","permalink":"http://mr-zhangbf.github.io/categories/vue/"},{"name":"react","slug":"react","permalink":"http://mr-zhangbf.github.io/categories/react/"},{"name":"问题锦集","slug":"问题锦集","permalink":"http://mr-zhangbf.github.io/categories/问题锦集/"},{"name":"个人","slug":"个人","permalink":"http://mr-zhangbf.github.io/categories/个人/"}],"tags":[{"name":"ssh_key","slug":"ssh-key","permalink":"http://mr-zhangbf.github.io/tags/ssh-key/"},{"name":"vue-mixins","slug":"vue-mixins","permalink":"http://mr-zhangbf.github.io/tags/vue-mixins/"},{"name":"vue-router","slug":"vue-router","permalink":"http://mr-zhangbf.github.io/tags/vue-router/"},{"name":"react","slug":"react","permalink":"http://mr-zhangbf.github.io/tags/react/"},{"name":"webpack","slug":"webpack","permalink":"http://mr-zhangbf.github.io/tags/webpack/"},{"name":"vuex","slug":"vuex","permalink":"http://mr-zhangbf.github.io/tags/vuex/"},{"name":"moment js vue","slug":"moment-js-vue","permalink":"http://mr-zhangbf.github.io/tags/moment-js-vue/"}]}